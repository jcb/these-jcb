% This file was created with JabRef 2.6.
% Encoding: UTF8

@INPROCEEDINGS{Amelunxen2006,
  author = {Carsten Amelunxen and Alexander K{\"o}nigs and Tobias R{\"o}tschke
	and Andy Sch{\"u}rr},
  title = {MOFLON: A Standard-Compliant Metamodeling Framework with Graph Transformations},
  booktitle = {ECMDA-FA},
  year = {2006},
  pages = {361-375},
  crossref = {ecmdafa2006},
  ee = {http://dx.doi.org/10.1007/11787044_27},
  file = {Amelunxen2006_MOFLONAStandandCompliantMetamodelingFrameworkwithGraphTransformations.pdf:Amelunxen2006_MOFLONAStandandCompliantMetamodelingFrameworkwithGraphTransformations.pdf:PDF}
}

@INPROCEEDINGS{Arendt2010,
  author = {Thorsten Arendt and Enrico Biermann and Stefan Jurack and Christian
	Krause and Gabriele Taentzer},
  title = {Henshin: Advanced Concepts and Tools for In-Place EMF Model Transformations},
  booktitle = {MoDELS (1)},
  year = {2010},
  pages = {121-135},
  crossref = {DBLP:conf/models/2010-1},
  ee = {http://dx.doi.org/10.1007/978-3-642-16145-2_9},
  file = {Arendt2010_HenshinAdvConceptsToolsforInPlaceEMFModelTransformations.pdf:Arendt2010_HenshinAdvConceptsToolsforInPlaceEMFModelTransformations.pdf:PDF}
}

@INPROCEEDINGS{Boronat2009,
  author = {Artur Boronat and Jos{\'e} Meseguer},
  title = {{MOMENT2: EMF Model Transformations in Maude}},
  booktitle = {JISBD},
  year = {2009},
  pages = {178-179},
  crossref = {jisbd2009}
}

@INPROCEEDINGS{Bezivin2001,
  author = {Jean B{\'e}zivin},
  title = {From Object Composition to Model Transformation with the MDA},
  booktitle = {TOOLS (39)},
  year = {2001},
  pages = {350-354},
  abstract = {Abstract: The object technology revolution has allowed the replacement
	of the more than twenty-years old step-wise procedural refinement
	paradigm by the more fashionable object composition paradigm. Surprisingly
	this evolution seems itself today to be triggering another even more
	radical change, towards model transformation. As a concrete trace
	of this, the Object Management Group (OMG) is rapidly moving from
	its previous Object Management Architecture vision (OMA) to the newest
	Model-Driven Architecture (MDA). Some of the main characteristics
	of this new organization will be outlined in the presentation.},
  crossref = {DBLP:conf/tools/39-2001},
  ee = {http://doi.ieeecomputersociety.org/10.1109/TOOLS.2001.10021},
  file = {Bezivin2001_FromObjectCompositiontoModelTransformationwiththeMDA.pdf:Bezivin2001_FromObjectCompositiontoModelTransformationwiththeMDA.pdf:PDF}
}

@INPROCEEDINGS{Bezivin2005b,
  author = {Jean B{\'e}zivin and Fr{\'e}d{\'e}ric Jouault and David Touzet},
  title = {Principles, Standards and Tools for Model Engineering},
  booktitle = {ICECCS},
  year = {2005},
  pages = {28-29},
  abstract = {We take here a broad view of model engineering as encompassing different
	approaches such as the OMG MDA™ proposal [9], the Microsoft Software
	Factories view [5], and many others. We distinguish the three levels
	of principles, standards and tools to facilitate the discussion.
	We propose the idea that there may exist a common set of principles
	that could be mapped to different implementation contexts through
	the help of common standards. We illustrate our claim with AMMA,
	a lightweight architectural style for a model-engineering platform
	that is currently mapped onto the Eclipse Modeling Framework [4].},
  crossref = {DBLP:conf/iceccs/2005},
  ee = {http://dx.doi.org/10.1109/ICECCS.2005.68},
  file = {Bezivin2005b_PrinciplesStandardsandToolsforModelEngineering.pdf:Bezivin2005b_PrinciplesStandardsandToolsforModelEngineering.pdf:PDF}
}

@INPROCEEDINGS{BezivinRST05,
  author = {Jean B{\'e}zivin and Bernhard Rumpe and Andy Sch{\"u}rr and Laurence
	Tratt},
  title = {Model Transformations in Practice Workshop},
  booktitle = {MoDELS Satellite Events},
  year = {2005},
  pages = {120-127},
  abstract = {Model Transformations in Practice (MTiP) 2005 was a workshop which
	provided a forum for the model transformation community to discuss
	practical model transformation issues. Although many different model
	transformation approaches have been proposed and explored in recent
	years, there has been little work on comparing and contrasting various
	approaches. Without such comparisons, it is hard to assess new model
	transformation approaches such as the upcoming OMG MOF/QVT recommendation,
	or to discern sensible future paths for the area. Our aims with the
	workshop were to create a forum that would help lead to an increased
	understanding of the relative merits of different model transformation
	techniques and approaches. A more advanced understanding of such
	merits is of considerable benefit to both the model transformation
	and wider modelling communities.},
  crossref = {DBLP:conf/uml/2005se},
  ee = {http://dx.doi.org/10.1007/11663430_13},
  file = {BezivinRST05_ModelTransformationsinPracticeWorkshop.pdf:BezivinRST05_ModelTransformationsinPracticeWorkshop.pdf:PDF},
  isbn = {978-3-540-31780-7}
}

@INPROCEEDINGS{Fernandez2010,
  author = {Maribel Fern{\'a}ndez and Olivier Namet},
  title = {Strategic programming on graph rewriting systems},
  booktitle = {IWS},
  year = {2010},
  pages = {1-20},
  crossref = {DBLP:journals/corr/abs-1012-5337},
  ee = {http://dx.doi.org/10.4204/EPTCS.44.1},
  file = {Fernandez2010_StrategicProgrammingonGraphRewritingSystems.pdf:Fernandez2010_StrategicProgrammingonGraphRewritingSystems.pdf:PDF}
}

@INPROCEEDINGS{Heuvel2007,
  author = {Willem-Jan van den Heuvel and Manfred A. Jeusfeld},
  title = {Model Transformations with Reference Models},
  booktitle = {IESA},
  year = {2007},
  pages = {63-75},
  crossref = {DBLP:conf/iesa/2007},
  ee = {http://dx.doi.org/10.1007/978-1-84628-858-6_6},
  file = {Heuvel2007_ModelTransformationsWithReferenceModels.pdf:Heuvel2007_ModelTransformationsWithReferenceModels.pdf:PDF}
}

@INPROCEEDINGS{Hurlin2009,
  author = {Cl{\'e}ment Hurlin},
  title = {Automatic Parallelization and Optimization of Programs by Proof Rewriting},
  booktitle = {SAS},
  year = {2009},
  pages = {52-68},
  crossref = {DBLP:conf/sas/2009},
  ee = {http://dx.doi.org/10.1007/978-3-642-03237-0_6},
  file = {Hurlin2009_AutomaticParallelizationandOptimizationofProgramsbyProofRewriting.pdf:Hurlin2009_AutomaticParallelizationandOptimizationofProgramsbyProofRewriting.pdf:PDF}
}

@INPROCEEDINGS{Kats2010,
  author = {Kats, Lennart C. L. and Visser, Eelco},
  title = {The spoofax language workbench: rules for declarative specification
	of languages and IDEs},
  booktitle = {OOPSLA},
  volume = {45},
  year = {2010},
  month = {October},
  pages = {444-463},
  journal = {SIGPLAN Notice},
  crossref = {DBLP:conf/oopsla/2010},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1869497},
  issn = {0362-1340},
  ee = {http://doi.acm.org/10.1145/1869459.1869497},
  numpages = {20},
  keywords = {IDE, domain-specific language, dsl, eclipse, language workbench, meta-tooling, sdf, sglr, spoofax, stratego},
  url = {http://doi.acm.org/10.1145/1932682.1869497},
  file = {Kats2010_TheSpoofaxLanguageWorkbenchRulesforDeclarativeSpecificatiorofL9anguagesandIDEs.pdf:Kats2010_TheSpoofaxLanguageWorkbenchRulesforDeclarativeSpecificatiorofL9anguagesandIDEs.pdf:PDF}
}

@INPROCEEDINGS{Klint2009,
  author = {Paul Klint and Tijs van der Storm and Jurgen J. Vinju},
  title = {RASCAL: A Domain Specific Language for Source Code Analysis and Manipulation},
  booktitle = {SCAM},
  year = {2009},
  pages = {168-177},
  crossref = {DBLP:conf/scam/2009},
  ee = {http://doi.ieeecomputersociety.org/10.1109/SCAM.2009.28}
}

@INPROCEEDINGS{Kolovos2008,
  author = {Dimitrios S. Kolovos and Richard F. Paige and Fiona Polack},
  title = {The Epsilon Transformation Language},
  booktitle = {ICMT},
  year = {2008},
  pages = {46-60},
  abstract = {Support for automated model transformation is essential for realizing
	a Model Driven Development (MDD) process. However, model transformation
	is only one of the many tools in a model engineering toolkit. To
	apply MDD in the large, automated support for a number of additional
	tasks such as model comparison, merging, validation and model-to-text
	transformation, is essential. While a number of successful model
	transformation languages have been currently proposed, the majority
	of them have been developed in isolation and as a result, they face
	consistency and integration difficulties with languages that support
	other model management tasks. We present the Epsilon Transformation
	Language (ETL), a hybrid model transformation language that has been
	developed atop the infrastructure provided by the Epsilon model management
	platform. By building atop Epsilon, ETL is seamlessly integrated
	with a number of other task-specific languages to help to realize
	composite model management workflows.},
  crossref = {icmt2008},
  ee = {http://dx.doi.org/10.1007/978-3-540-69927-9_4},
  file = {Kolovos2008_TheEpsilonTransformationLanguage.pdf:Kolovos2008_TheEpsilonTransformationLanguage.pdf:PDF}
}

@INPROCEEDINGS{Muller2005,
  author = {Pierre-Alain Muller and Franck Fleurey and Jean-Marc J{\'e}z{\'e}quel},
  title = {Weaving Executability into Object-Oriented Meta-languages},
  booktitle = {MoDELS},
  year = {2005},
  pages = {264-278},
  abstract = {Nowadays, object-oriented meta-languages such as MOF (Meta-Object
	Facility) are increasingly used to specify domain-specific languages
	in the model-driven engineering community. However, these meta-languages
	focus on structural specifications and have no built-in support for
	specifications of operational semantics. In this paper we explore
	the idea of using aspect-oriented modeling to add precise action
	specifications with static type checking and genericity at the meta
	level, and examine related issues and possible solutions. We believe
	that such a combination would bring significant benefits to the community,
	such as the specification, simulation and testing of operational
	semantics of metamodels. We present requirements for such statically-typed
	meta-languages and rationales for the aforementioned benefits.},
  crossref = {DBLP:conf/uml/2005},
  ee = {http://dx.doi.org/10.1007/11557432_19},
  file = {Muller2005_WeavingExecutabilityintoObjectOrientedMetaLanguages.pdf:Muller2005_WeavingExecutabilityintoObjectOrientedMetaLanguages.pdf:PDF}
}

@INPROCEEDINGS{Schurr2008,
  author = {Andy Sch{\"u}rr and Felix Klar},
  title = {15 Years of Triple Graph Grammars},
  booktitle = {ICGT},
  year = {2008},
  pages = {411-425},
  abstract = {Triple graph grammars (TGGs) have been invented 15 years ago as a
	formalism for the declarative specification of bidirectional graph-to-graph
	translations. In this paper we present a list of still open problems
	concerning the interpretation and the expressiveness of TGGs. We
	will comment on extensions proposed to improve the original approach
	and the drawbacks that arise thereof. Consequently a more precise
	formalization of compulsory properties of the translation of triple
	graph grammars into forward and backward graph translation functions
	is given. Regarding these properties an interpretation and implementation
	of negative application conditions is derived that does not destroy
	the benefits of the original approach. Additionally a new demand-driven
	forward/backward translation rule application strategy is proposed.
	It guarantees for the first time automatically a correct ordering
	of rule applications without imposing any additional requirements
	on the structure of the regarded graphs.},
  crossref = {DBLP:conf/gg/2008},
  ee = {http://dx.doi.org/10.1007/978-3-540-87405-8_28},
  file = {Schurr2008_15YearsofTGG.pdf:Schurr2008_15YearsofTGG.pdf:PDF}
}

@INPROCEEDINGS{atl04,
  author = {Freddy Allilaire and Tarik Idrissi},
  title = {ADT: Eclipse development tools for ATL},
  booktitle = {Proceedings of the Second European Workshop on Model Driven Architecture
	(MDA) with an emphasis on Methodologies and Transformations (EWMDA-2)},
  year = {2004},
  pages = {171--178},
  publisher = {Computing Laboratory, University of Kent, Canterbury, Kent CT2 7NF,
	UK},
  date-added = {2011-10-15 13:03:49 +0200},
  date-modified = {2011-10-15 13:05:19 +0200},
  keywords = {modeling}
}

@INCOLLECTION{Bezivin2006,
  author = {Bézivin, Jean},
  title = {Model Driven Engineering: An Emerging Technical Space},
  booktitle = {Generative and Transformational Techniques in Software Engineering},
  publisher = {Springer Berlin Heidelberg},
  year = {2006},
  editor = {Laemmel, Ralf and Saraiva, Joao and Visser, Joost},
  volume = {4143},
  series = {Lecture Notes in Computer Science},
  pages = {36-64},
  abstract = {As an emerging solution to the handling of complex and evolving software
	systems, Model Driven Engineering (MDE) is still very much in evolution.
	The industrial demand is quite high while the research answer for
	a sound set of foundation principles is still far from being stabilized.
	Therefore it is important to provide a current state of the art in
	MDE, describing what its origins are, what its present state is,
	and where it seems to be presently leading. One important question
	is how MDE relates to other contemporary technologies. This tutorial
	proposes the ”technical space” concept to this purpose. The two main
	objectives are to present first the basic MDE principles and second
	how these principles may be mapped onto modern platform support.
	Other issues that will be discussed are the applicability of these
	ideas, concepts, and tools to solve current practical problems. Various
	organizations and companies (OMG, IBM, Microsoft, etc.) are currently
	proposing several environments claiming to support MDE. Among these,
	the OMG MDATM(Model Driven Architecture) has a special place since
	it was historically one of the original proposals in this area. This
	work focuses on the identification of basic MDE principles, practical
	characteristics of MDE (direct representation, automation, and open
	standards), original MDE scenarios, and discussions of suitable tools
	and methods.},
  doi = {10.1007/11877028_2},
  file = {Bezivin2006_ModelDriverEngieneering\:AnEmergingTechnicalSpace.pdf:Bezivin2006_ModelDriverEngieneering\:AnEmergingTechnicalSpace.pdf:PDF},
  isbn = {978-3-540-45778-7},
  keywords = {Model Driven Engineering; MDE; MDA; Metamodeling; Technical Spaces},
  url = {http://dx.doi.org/10.1007/11877028_2}
}

@TECHREPORT{Bezivin2003-ATLTechReport,
  author = {J. B\'ezivin and E. Breton and P. Valduriez and G. Dup\'e},
  title = {The {ATL} Transformation-Based Model Management Framework},
  institution = {Atlas Group, INRIA - IRIN - University of Nantes - Soft-Maint Groupe
	Sodifrance},
  year = {2003},
  number = {03.08},
  file = {Bezivin2003-ATLTechReport.pdf:Bezivin2003-ATLTechReport.pdf:PDF}
}

@INCOLLECTION{Bezivin2005,
  author = {B\'ezivin, Jean and Jouault, Fr\'ed\'eric and Rosenthal, Peter and
	Valduriez, Patrick},
  title = {Modeling in the Large and Modeling in the Small},
  booktitle = {Model Driven Architecture},
  publisher = {Springer Berlin Heidelberg},
  year = {2005},
  editor = {Assmann, Uwe and Aksit, Mehmet and Rensink, Arend},
  volume = {3599},
  series = {Lecture Notes in Computer Science},
  pages = {33-46},
  abstract = {As part of the AMMA project (ATLAS Model Management Architecture),
	we are currently building several model management tools to support
	the tasks of modeling in the large and of modeling in the small.
	The basic idea is to define an experimental framework based on the
	principle of models as first class entities. This allows us to investigate
	issues of conceptual and practical interest in the field of model
	management applied to data-intensive applications. By modeling in
	the small, we mean dealing with model and metamodel elements and
	the relations between them. In this sense, ATL (ATLAS Transformation
	Language) allows expressing automatic model transformations. We also
	motivate the need for the “ModelWeaver” which handles fine-grained
	relationships between elements of different metamodels with a different
	purpose than automatic model transformation. By modeling in the large,
	we mean globally dealing with models, metamodels and their properties
	and relations. We use the notion of a “MegaModel” to describe a registry
	for models and metamodels. This paper proposes a lightweight architectural
	style for a model-engineering platform as well as a first prototype
	implementation demonstrating its feasibility.},
  doi = {10.1007/11538097_3},
  file = {Bezivin2005_ModelingintheLargeandModelingintheSmall.pdf:Bezivin2005_ModelingintheLargeandModelingintheSmall.pdf:PDF},
  isbn = {978-3-540-28240-2},
  url = {http://dx.doi.org/10.1007/11538097_3}
}

@PHDTHESIS{Balland2009,
  author = {Balland, Emilie},
  title = {Conception d'un langage d{\'e}di{\'e} {\`a} l'analyse et la transformation
	de programmes},
  school = {Universit{\'e} Henri Poincar{\'e} - Nancy I},
  year = {2009},
  type = {THESE},
  month = Mar,
  file = {Balland2009_these.pdf:Balland2009_these.pdf:PDF},
  keywords = {langages de programmation ; langages embarqu{\'e}s ; analyse statique
	; transformation de programmes ; r{\'e}{\'e}criture, strat{\'e}gies
	; termes-graphes},
  url = {http://hal.inria.fr/tel-00435881}
}

@INPROCEEDINGS{Balland2007,
  author = {Balland, Emilie and Brauner, Paul and Kopetz, Radu and Moreau, Pierre-Etienne
	and Reilles, Antoine},
  title = {Tom: piggybacking rewriting on java},
  booktitle = {Proceedings of the 18th international conference on Term rewriting
	and applications},
  year = {2007},
  series = {RTA'07},
  pages = {36--47},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid = {1779787},
  file = {Balland2007_Tom_PiggybackingRewritingonJava.pdf:Balland2007_Tom_PiggybackingRewritingonJava.pdf:PDF},
  isbn = {3-540-73447-3, 978-3-540-73447-5},
  location = {Paris, France},
  numpages = {12},
  url = {http://dl.acm.org/citation.cfm?id=1779782.1779787}
}

@ARTICLE{Balland2012,
  author = {Balland, Emilie and Moreau, Pierre-Etienne and Reilles, Antoine},
  title = {Effective strategic programming for Java developers},
  journal = {Software: Practice and Experience},
  number = {2},
  volume = {44},
  year = {2012},
  pages = {129--162},
  abstract = {In object programming languages, the Visitor design pattern allows
	separation of algorithms and data structures. When applying this
	pattern to tree-like structures, programmers are always confronted
	with the difficulty of making their code evolve. One reason is that
	the code implementing the algorithm is interwound with the code implementing
	the traversal inside the visitor. When implementing algorithms such
	as data analyses or transformations, encoding the traversal directly
	into the algorithm turns out to be cumbersome as this type of algorithm
	only focuses on a small part of the data-structure model (e.g., program
	optimization). Unfortunately, typed programming languages like Java
	do not offer simple solutions for expressing generic traversals.
	Rewrite-based languages like ELAN or Stratego have introduced the
	notion of strategies to express both generic traversal and rule application
	control in a declarative way. Starting from this approach, our goal
	was to make the notion of strategic programming available in a widely
	used language such as Java and thus to offer generic traversals in
	typed Java structures. In this paper, we present the strategy language
	SL that provides programming support for strategies in Java.},
  doi = {10.1002/spe.2159},
  file = {Balland2012_spe2159_EffectiveStrategicProgrammingforJavaDevelopers.pdf:Balland2012_spe2159_EffectiveStrategicProgrammingforJavaDevelopers.pdf:PDF},
  issn = {1097-024X},
  keywords = {generic programming, term rewriting, tree traversal, strategies, object-oriented
	programming},
  publisher = {John Wiley \& Sons, Ltd},
  url = {http://dx.doi.org/10.1002/spe.2159}
}

@ARTICLE{BallandMR08,
  author = {Emilie Balland and Pierre-Etienne Moreau and Antoine Reilles},
  title = {Rewriting Strategies in Java},
  journal = {Electr. Notes Theor. Comput. Sci.},
  year = {2008},
  volume = {219},
  pages = {97-111},
  file = {BallandMR08_RewritingStrategiesinJava.pdf:BallandMR08_RewritingStrategiesinJava.pdf:PDF},
  url = {http://dx.doi.org/10.1016/j.entcs.2008.10.037}
}

@inproceedings{Balland2006,
 author = {Balland, Emilie and Kirchner, Claude and Moreau, Pierre-Etienne},
 title = {Formal islands},
 booktitle = {Proceedings of the 11th international conference on Algebraic Methodology and Software Technology},
 series = {AMAST'06},
 year = {2006},
 isbn = {3-540-35633-9, 978-3-540-35633-2},
 location = {Kuressaare, Estonia},
 pages = {51--65},
 numpages = {15},
 publisher = {Springer-Verlag}
} 


@INCOLLECTION{Barendregt1987,
  author = {Barendregt, H. and van Eekelen, M. and Glauert, J. and Kennaway,
	J. and Plasmeijer, M. and Sleep, M.},
  title = {Term graph rewriting},
  booktitle = {PARLE Parallel Architectures and Languages Europe},
  publisher = {Springer Berlin / Heidelberg},
  year = {1987},
  editor = {de Bakker, J. and Nijman, A. and Treleaven, P.},
  volume = {259},
  series = {Lecture Notes in Computer Science},
  pages = {141-158},
  note = {10.1007/3-540-17945-3_8},
  abstract = {Graph rewriting (also called reduction) as defined in Wadsworth [1971]
	was introduced in order to be able to give a more efficient implementation
	of functional programming languages in the form of lambda calculus
	or term rewrite systems: identical subterms are shared using pointers.
	Several other authors, e.g. Ehrig [1979], Staples [1980a,b,c], Raoult
	[1984] and van den Broek et al. [1986] have given mathematical descriptions
	of graph rewriting, usually employing concepts from category theory.
	These papers prove among other things the correctness of graph rewriting
	in the form of the Church-Rosser property for well-behaved (i.e.
	regular) rewrite systems. However, only Staples has formally studied
	the soundness and completeness of graph rewriting with respect to
	term rewriting. In this paper we give a direct operational description
	of graph rewriting that avoids the category theoretic notions. We
	show that if a term t is interpreted as a graph g(t) and is reduced
	in the graph world, then the result represents an actual reduct of
	the original term t( soundness ). For weakly regular term rewrite
	systems, there is also a completeness result: every normal form of
	a term t can be obtained from the graphical implementation. We also
	show completeness for all term rewrite systems which possess a so
	called hypernormalising strategy, and in that case the strategy also
	gives a normalising strategy for the graphical implementation. Besides
	having nice theoretical properties, weakly regular systems offer
	opportunities for parallelism, since redexes at different places
	can be executed independently or in parallel, without affecting the
	final result.},
  affiliation = {University of Nijmegen Nijmegen The Netherlands Nijmegen The Netherlands},
  file = {Barendregt1987_TermGraphRewriting.pdf:Barendregt1987_TermGraphRewriting.pdf:PDF},
  isbn = {978-3-540-17945-0},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/3-540-17945-3_8}
}

@INCOLLECTION{Berthomieu2009,
  author = {Berthomieu, Bernard and Bodeveix, Jean-Paul and Chaudet, Christelle
	and Dal Zilio, Silvano and Filali, Mamoun and Vernadat, François},
  title = {Formal Verification of AADL Specifications in the Topcased Environment},
  booktitle = {Reliable Software Technologies – Ada-Europe 2009},
  publisher = {Springer Berlin / Heidelberg},
  year = {2009},
  editor = {Kordon, Fabrice and Kermarrec, Yvon},
  volume = {5570},
  series = {Lecture Notes in Computer Science},
  pages = {207-221},
  note = {10.1007/978-3-642-01924-1_15},
  abstract = {We describe a formal verification toolchain for AADL, the SAE Architecture
	Analysis and Design Language, enriched with its behavioral annex.
	Our approach is based on tools that are integrated in the Topcased
	environment. We give a high-level view of the tools involved and
	illustrate the successive transformations that take place during
	the verification process.},
  affiliation = {CNRS; LAAS 7 avenue colonel Roche F-31077 Toulouse France},
  file = {Berthomieu2009_FormalVerificationofAADLSpecintheTopcasedEnv.pdf:Berthomieu2009_FormalVerificationofAADLSpecintheTopcasedEnv.pdf:PDF},
  isbn = {978-3-642-01923-4},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-01924-1_15}
}

@INPROCEEDINGS{Berthomieu2010,
  author = {Berthomieu, Bernard and Bodeveix, Jean-Paul and Dal Zilio, Silvano
	and Dissaux, Pierre and Filali, Mamoun and Gaufillet, Pierre and
	Heim, Sebastien and Vernadat, Francois},
  title = {Formal Verification of AADL models with Fiacre and Tina},
  booktitle = {{ERTSS 2010 - Embedded Real-Time Software and Systems}},
  year = {2010},
  pages = {1-9},
  address = {TOULOUSE (31000), France},
  month = May,
  note = {9 pages DGE Topcased },
  abstract = {{This paper details works undertaken in the scope of the Spices project
	concerning the behavioral verification of AADL models. We give a
	high-level view of the tools involved and describe the successive
	transformations performed by our verification process. We also report
	on an experiment carried out in order to evaluate our framework and
	give the first experimental results obtained on real-size models.
	This demonstrator models a network protocol in charge of data communications
	between an airplane and ground stations. From this study we draw
	a set of conclusions about the integration of model-checking tools
	in an industrial development process.}},
  affiliation = {Laboratoire d'analyse et d'architecture des syst{\`e}mes - LAAS ,
	Institut de recherche en informatique de Toulouse - IRIT , Ellidiss
	Technologies , Airbus France - Airbus , CS Communication \& Syst{\`e}mes},
  audience = {internationale },
  collaboration = {ITEA Spices; DGE Topcased },
  hal_id = {hal-00494348},
  keywords = {Architecture Description; Verification and Validation; Model-Driven
	Engineering; Transportation},
  language = {Anglais},
  url = {http://hal.archives-ouvertes.fr/hal-00494348}
}

@INPROCEEDINGS{Berthomieu2008,
  author = {Berthomieu, Bernard and Bodeveix, Jean-Paul and Farail, Patrick and
	Filali, Mamoun and Garavel, Hubert and Gaufillet, Pierre and Lang,
	Frederic and Vernadat, Fran{\c c}ois},
  title = {Fiacre: an Intermediate Language for Model Verification in the Topcased
	Environment},
  booktitle = {{ERTS 2008}},
  year = {2008},
  address = {Toulouse, France},
  abstract = {{Fiacre was designed in the framework of the TOPCASED project dealing
	with model-driven engineering and gathering numerous partners, from
	both industry and academics. Therefore, Fiacre is designed both as
	the target language of model transformation engines from various
	models such as SDL, UML, AADL, and as the source language of compilers
	into the targeted verification toolboxes, namely CADP and Tina in
	the first step. In this paper, we present the Fiacre language. Then
	transformations from AADL to Fiacre are illustrated on a small example.}},
  affiliation = {Laboratoire d'analyse et d'architecture des syst{\`e}mes - LAAS ,
	Institut de recherche en informatique de Toulouse - IRIT , Airbus
	France - Airbus , VASY - INRIA Grenoble Rh{\^o}ne-Alpes / LIG Laboratoire
	d'Informatique de Grenoble},
  audience = {internationale },
  file = {Berthomieu2008-Bodeveix-Farail-et-al-08.pdf:Berthomieu2008-Bodeveix-Farail-et-al-08.pdf:PDF},
  hal_id = {inria-00262442},
  language = {Anglais},
  pdf = {http://hal.inria.fr/inria-00262442/PDF/Berthomieu-Bodeveix-Farail-et-al-08.pdf},
  url = {http://hal.inria.fr/inria-00262442}
}

@ARTICLE{p66-bessey,
  author = {Bessey, Al and Block, Ken and Chelf, Ben and Chou, Andy and Fulton,
	Bryan and Hallem, Seth and Henri-Gros, Charles and Kamsky, Asya and
	McPeak, Scott and Engler, Dawson},
  title = {A few billion lines of code later: using static analysis to find
	bugs in the real world},
  journal = {Commun. ACM},
  year = {2010},
  volume = {53},
  pages = {66--75},
  number = {2},
  month = feb,
  acmid = {1646374},
  address = {New York, NY, USA},
  doi = {10.1145/1646353.1646374},
  file = {p66-bessey_AFewBillionLinesofCodeLater_UsingStaticAnalysistoFindBugsintheRealWorld.pdf:p66-bessey_AFewBillionLinesofCodeLater_UsingStaticAnalysistoFindBugsintheRealWorld.pdf:PDF},
  issn = {0001-0782},
  issue_date = {February 2010},
  numpages = {10},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1646353.1646374}
}

@INCOLLECTION{Bezivin2006b,
  author = {Bezivin, Jean and Buttner, Fabian and Gogolla, Martin and Jouault,
	Frederic and Kurtev, Ivan and Lindow, Arne},
  title = {Model Transformations? Transformation Models!},
  booktitle = {Model Driven Engineering Languages and Systems},
  publisher = {Springer Berlin Heidelberg},
  year = {2006},
  editor = {Nierstrasz, Oscar and Whittle, Jon and Harel, David and Reggio, Gianna},
  volume = {4199},
  series = {Lecture Notes in Computer Science},
  pages = {440-453},
  abstract = {Much of the current work on model transformations seems essentially
	operational and executable in nature. Executable descriptions are
	necessary from the point of view of implementation. But from a conceptual
	point of view, transformations can also be viewed as descriptive
	models by stating only the properties a transformation has to fulfill
	and by omitting execution details. This contribution discusses the
	view that model transformations can be abstracted as being transformation
	models. As a simple example for a transformation model, the well-known
	transformation from the Entity-Relationship model to the Relational
	model is shown. A transformation model in this contribution is nothing
	more than an ordinary, simple model, i.e., a UML/MOF class diagram
	together with OCL constraints. A transformation model may transport
	syntax and semantics of the described domain. The contribution thus
	covers two views on transformations: An operational model transformation
	view and a descriptive transformation model view.},
  doi = {10.1007/11880240_31},
  file = {Bezivin2006b_ModelTransformations?TransformationModels!.pdf:Bezivin2006b_ModelTransformations?TransformationModels!.pdf:PDF},
  isbn = {978-3-540-45772-5},
  url = {http://dx.doi.org/10.1007/11880240_31}
}

@INPROCEEDINGS{Bezivin2001a,
  author = {Bezivin, J. and Gerbe, O.},
  title = {Towards a precise definition of the OMG/MDA framework},
  booktitle = {Automated Software Engineering, 2001. (ASE 2001). Proceedings. 16th
	Annual International Conference on},
  year = {2001},
  pages = { 273 - 280},
  month = {nov.},
  abstract = { We are currently witnessing an important paradigm shift in information
	system construction, namely the move from object and component technology
	to model technology. The object technology revolution has allowed
	the replacement of the over twenty-year-old step-wise procedural
	decomposition paradigm with the more fashionable object composition
	paradigm. Surprisingly, this evolution seems to have triggered another
	even more radical change, the current trend toward model transformation.
	A concrete example is the Object Management Group's rapid move from
	its previous Object Management Architecture vision to the latest
	Model-Driven Architecture. This paper proposes an interpretation
	of this evolution through abstract investigation. In order to stay
	as language-independent as possible, we have employed the neutral
	formalism of Sowa's conceptual graphs to describe the various situations
	characterizing this organization. This will allow us to identify
	potential problems in the proposed modeling framework and suggest
	some possible solutions.},
  doi = {10.1109/ASE.2001.989813},
  file = {Bezivin2001a_TowardsaPreciseDefinitionoftheOMGMDAFramework.pdf:Bezivin2001a_TowardsaPreciseDefinitionoftheOMGMDAFramework.pdf:PDF},
  issn = {1938-4300},
  keywords = {Application software;Computer architecture;Concrete;Ear;Information
	systems;Logic;Management information systems;Object oriented modeling;Rendering
	(computer graphics);Unified modeling language; object-oriented programming;
	systems analysis; OMG/MDA framework; conceptual graphs; information
	system construction; model technology; model transformation; model-driven
	architecture; object technology revolution; paradigm shift;}
}

@INCOLLECTION{Biermann2008,
  author = {Biermann, Enrico and Ermel, Claudia and Taentzer, Gabriele},
  title = {Precise Semantics of EMF Model Transformations by Graph Transformation},
  booktitle = {Model Driven Engineering Languages and Systems},
  publisher = {Springer Berlin / Heidelberg},
  year = {2008},
  editor = {Czarnecki, Krzysztof and Ober, Ileana and Bruel, Jean-Michel and
	Uhl, Axel and V�lter, Markus},
  volume = {5301},
  series = {Lecture Notes in Computer Science},
  pages = {53-67},
  note = {10.1007/978-3-540-87875-9_4},
  abstract = {Model transformation is one of the key activities in model-driven
	software development. An increasingly popular technology to define
	modeling languages is provided by the Eclipse Modeling Framework
	(EMF). Several EMF model transformation approaches have been developed,
	focusing on different transformation aspects. To validate model transformations
	wrt. functional behavior and correctness, a formal foundation is
	needed. In this paper, we define EMF model transformations as a special
	kind of typed graph transformations using node type inheritance.
	Containment constraints of EMF model transformations are translated
	to a special kind of EMF model transformation rules such that their
	application leads to consistent transformation results only. Thus,
	we identify a kind of EMF model transformations which behave like
	algebraic graph transformations. As a consequence, the rich theory
	of algebraic graph transformation can be applied to these EMF model
	transformations to show functional behavior and correctness. We illustrate
	our approach by selected refactorings of simplified statechart models.},
  affiliation = {Technische Universit�t Berlin, Germany},
  isbn = {978-3-540-87874-2},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-540-87875-9_4}
}

@ARTICLE{springerlink:10.1007/s10270-011-0199-7,
  author = {Biermann, Enrico and Ermel, Claudia and Taentzer, Gabriele},
  title = {Formal foundation of consistent EMF model transformations by algebraic
	graph transformation},
  journal = {Software and Systems Modeling},
  year = {2012},
  volume = {11},
  pages = {227-250},
  note = {10.1007/s10270-011-0199-7},
  abstract = {Model transformation is one of the key activities in model-driven
	software development. An increasingly popular technology to define
	modeling languages is provided by the Eclipse Modeling Framework
	(EMF). Several EMF model transformation approaches have been developed,
	focusing on different transformation aspects. To validate model transformations
	with respect to functional behavior and correctness, a formal foundation
	is needed. In this paper, we define consistent EMF model transformations
	as a restricted class of typed graph transformations using node type
	inheritance. Containment constraints of EMF model transformations
	are translated to a special kind of graph transformation rules such
	that their application leads to consistent transformation results
	only. Thus, consistent EMF model transformations behave like algebraic
	graph transformations and the rich theory of algebraic graph transformation
	can be applied to these EMF model transformations to show functional
	behavior and correctness. Furthermore, we propose parallel graph
	transformation as a suitable framework for modeling EMF model transformations
	with multi-object structures . Rules extended by multi-object structures
	can specify a flexible number of recurring structures. The actual
	number of recurring structures is dependent on the application context
	of such a rule. We illustrate our approach by selected refactorings
	of simplified statechart models. Finally, we discuss the implementation
	of our concepts in a tool environment for EMF model transformations.},
  affiliation = {Technische Universit1ät Berlin, Berlin, Germany},
  file = {Biermann2012_FormalFoundationofConsistentEMFModelTransformationsbyAlgebraicGraphsTransformation.pdf:Biermann2012_FormalFoundationofConsistentEMFModelTransformationsbyAlgebraicGraphsTransformation.pdf:PDF},
  issn = {1619-1366},
  issue = {2},
  keyword = {Computer Science},
  publisher = {Springer Berlin / Heidelberg},
  url = {http://dx.doi.org/10.1007/s10270-011-0199-7}
}

@INPROCEEDINGS{Bouquet2012,
  author = {Bouquet, F. and Gauthier, J. and Hammad, A. and Peureux, F.},
  title = {Transformation of SysML Structure Diagrams to VHDL-AMS},
  booktitle = {Design, Control and Software Implementation for Distributed MEMS
	(dMEMS), 2012 Second Workshop on},
  year = {2012},
  pages = {74 -81},
  month = {april},
  abstract = {In this paper, we propose an approach to translate the Sys ML language
	to VHDL-AMS code. This approach is the first step to the generation
	of the VHDL-AMS code from the structural diagrams Sys ML. In this
	step, we address the Block Definition Diagram and the Internal Block
	Diagram. The translation uses Model Driven Engineer (MDE) methods
	as the transformation of model to another model (M2M) with ATL Atlas
	Transformation Language and the code generation from models (M2T)
	using Xpand. We provide the translation rules between the two elements.
	Implementation and methodology are illustrated on a micro-system
	case study: the Smart surface system.},
  doi = {10.1109/dMEMS.2012.12},
  file = {Bouquet2012_TransformationofSysMLStructureDiagramstoVHDLAMS.pdf:Bouquet2012_TransformationofSysMLStructureDiagramstoVHDLAMS.pdf:PDF},
  keywords = {Atlas transformation language;M2M;SysML structure diagrams;VHDL-AMS;block
	definition diagram;code generation;internal block diagram;model driven
	engineer methods;smart surface system;Unified Modeling Language;software
	engineering;}
}

@INPROCEEDINGS{Bezivin2003-firstExperiment,
  author = {Jean Bézivin and Grégoire Dupé and Frédéric Jouault and Gilles Pitette
	and Jamal Eddine Rougui},
  title = {First experiments with the ATL model transformation language: Transforming
	XSLT into XQuery},
  booktitle = {2nd OOPSLA Workshop on Generative Techniques in the context of Model
	Driven Architecture},
  year = {2003},
  file = {Bezivin2003-firstExperimentwithATLmodeltransformationlanguage.pdf:Bezivin2003-firstExperimentwithATLmodeltransformationlanguage.pdf:PDF}
}

@ARTICLE{Clavel2002,
  author = {M. Clavel and F. Dur\'{a}n and S. Eker and P. Lincoln and N. Mart\'{i}-Oliet
	and J. Meseguer and J.F. Quesada},
  title = {Maude: specification and programming in rewriting logic},
  journal = {Theoretical Computer Science},
  year = {2002},
  volume = {285},
  pages = {187 - 243},
  number = {2},
  note = {Rewriting Logic and its Applications},
  abstract = {Maude is a high-level language and a high-performance system supporting
	executable specification and declarative programming in rewriting
	logic. Since rewriting logic contains equational logic, Maude also
	supports equational specification and programming in its sublanguage
	of functional modules and theories. The underlying equational logic
	chosen for Maude is membership equational logic, that has sorts,
	subsorts, operator overloading, and partiality definable by membership
	and equality conditions. Rewriting logic is reflective, in the sense
	of being able to express its own metalevel at the object level. Reflection
	is systematically exploited in Maude endowing the language with powerful
	metaprogramming capabilities, including both user-definable module
	operations and declarative strategies to guide the deduction process.
	This paper explains and illustrates with examples the main concepts
	of Maude's language design, including its underlying logic, functional,
	system and object-oriented modules, as well as parameterized modules,
	theories, and views. We also explain how Maude supports reflection,
	metaprogramming and internal strategies. The paper outlines the principles
	underlying the Maude system implementation, including its semicompilation
	techniques. We conclude with some remarks about applications, work
	on a formal environment for Maude, and a mobile language extension
	of Maude.},
  doi = {10.1016/S0304-3975(01)00359-0},
  file = {Clavel2002_Maude\:SpecificationandProgramminginRewritingLogic.pdf:Clavel2002_Maude\:SpecificationandProgramminginRewritingLogic.pdf:PDF},
  issn = {0304-3975},
  keywords = {Maude},
  url = {http://www.sciencedirect.com/science/article/pii/S0304397501003590}
}

@ARTICLE{Clavel1996a,
  author = {M. Clavel and S. Eker and P. Lincoln and J. Meseguer},
  title = {Principles of Maude},
  journal = {Electronic Notes in Theoretical Computer Science},
  year = {1996},
  volume = {4},
  pages = {65 - 89},
  number = {0},
  note = {RWLW96, First International Workshop on Rewriting Logic and its Applications},
  abstract = {This paper introduces the basic concepts of the rewriting logic language
	Maude and discusses its implementation. Maude is a wide-spectrum
	language supporting formal specification, rapid prototyping, and
	parallel programming. Maude's rewriting logic paradigm includes the
	functional and object-oriented paradigms as sublanguages. The fact
	that rewriting logic is reflective leads to novel metaprogramming
	capabilities that can greatly increase software reusability and adaptability.
	Control of the rewriting computation is achieved through internal
	strategy languages defined inside the logic. Maude's rewrite engine
	is designed with the explicit goal of being highly extensible and
	of supporting rapid prototyping and formal methods applications,
	but its semi-compilation techniques allow it to meet those goals
	with good performance.},
  doi = {10.1016/S1571-0661(04)00034-9},
  file = {Clavel1996a_PrinciplesofMaude.pdf:Clavel1996a_PrinciplesofMaude.pdf:PDF},
  issn = {1571-0661},
  url = {http://www.sciencedirect.com/science/article/pii/S1571066104000349}
}

@ARTICLE{Clavel1996,
  author = {Manuel Clavel and Jos\'{e} Meseguer},
  title = {Reflection and Strategies in Rewriting Logic},
  journal = {Electronic Notes in Theoretical Computer Science},
  year = {1996},
  volume = {4},
  pages = {126 - 148},
  number = {0},
  note = {RWLW96, First International Workshop on Rewriting Logic and its Applications},
  abstract = {After giving general metalogical axioms characterizing reflection
	in general logics in terms of the notion of a universal theory, this
	paper specifies a finitely presented universal theory for rewriting
	logic and gives a detailed proof of the claim made in [5] that rewriting
	logic is reflective. The paper also gives general axioms for the
	notion of a strategy language internal to a given logic. Exploiting
	the fact that rewriting logic is reflexive, a general method for
	defining internal strategy languages for it and proving their correctness
	is proposed and is illustrated with an example. The Maude language
	has been used as an experimental vehicle for the exploration of these
	techniques. They seem quite promising for applications such as metaprogramming
	and module composition, logical framework representations, development
	of formal programming and proving environments, supercompilation,
	and formal verification of strategies.},
  doi = {10.1016/S1571-0661(04)00037-4},
  file = {Clavel1996_ReflectionandStrategiesinRewritnigLogic.pdf:Clavel1996_ReflectionandStrategiesinRewritnigLogic.pdf:PDF},
  issn = {1571-0661},
  url = {http://www.sciencedirect.com/science/article/pii/S1571066104000374}
}

@UNPUBLISHED{Combemale2008,
  author = {Combemale, Beno{\^\i}t},
  title = {{Ing{\'e}nierie Dirig{\'e}e par les Mod{\`e}les (IDM) -- {\'E}tat
	de l'art}},
  year = {2008},
  abstract = {{L'ing{\'e}nierie dirig{\'e}e par les mod{\`e}les (IDM), ou Model
	Driven Engineering (MDE) en anglais, a permis plusieurs am{\'e}liorations
	significatives dans le d{\'e}veloppement de syst{\`e}mes complexes
	en permettant de se concentrer sur une pr{\'e}occupation plus abstraite
	que la programmation classique. Il s'agit d'une forme d'ing{\'e}nierie
	g{\'e}n{\'e}rative dans laquelle tout ou partie d'une application
	est engendr{\'e}e {\`a} partir de mod{\`e}les. Un mod{\`e}le est
	une abstraction, une simplification d'un syst{\`e}me qui est suffisante
	pour comprendre le syst{\`e}me mod{\'e}lis{\'e} et r{\'e}pondre aux
	questions que l'on se pose sur lui. Un syst{\`e}me peut {\^e}tre
	d{\'e}crit par diff{\'e}rents mod{\`e}les li{\'e}s les uns aux autres.
	L'id{\'e}e phare est d'utiliser autant de langages de mod{\'e}lisation
	diff{\'e}rents (Domain Specific Modeling Languages - DSML) que les
	aspects chronologiques ou technologiques du d{\'e}veloppement du
	syst{\`e}me le n{\'e}cessitent. La d{\'e}finition de ces DSML, appel{\'e}e
	m{\'e}tamod{\'e}lisation, est donc une probl{\'e}matique cl{\'e}
	de cette nouvelle ing{\'e}nierie. Par ailleurs, afin de rendre op{\'e}rationnels
	les mod{\`e}les (pour la g{\'e}n{\'e}ration de code, de documentation
	et de test, la validation, la v{\'e}rification, l'ex{\'e}cution,
	etc.), une autre probl{\'e}matique cl{\'e} est celle de la transformation
	de mod{\`e}le. Nous proposons dans ce document une pr{\'e}sentation
	des principes cl{\'e}s de cette nouvelle ing{\'e}nierie. Nous introduisons
	dans un premier temps la notion de mod{\`e}le, les travaux de normalisation
	de l'OMG, et les principes de g{\'e}n{\'e}ralisation offerts {\`a}
	travers les DSML. Nous d{\'e}taillons ensuite les deux axes principaux
	de l'IDM. La m{\'e}tamod{\'e}lisation d'abord, dont le but est d'assurer
	une d{\'e}finition correcte des DSML. Nous illustrons cette partie
	par la d{\'e}finition de SimplePDL, un langage simple de description
	de proc{\'e}d{\'e} de d{\'e}veloppement. Nous pr{\'e}sentons ensuite
	les principes de la transformation de mod{\`e}le et les outils actuellement
	disponibles. Nous concluons enfin par une discussion sur les limites
	actuelles de l'IDM.}},
  affiliation = {Institut de recherche en informatique de Toulouse - IRIT},
  file = {Combemale2008_mde-stateoftheart.pdf:Combemale2008_mde-stateoftheart.pdf:PDF},
  hal_id = {hal-00371565},
  language = {Fran{\c c}ais},
  pdf = {http://hal.archives-ouvertes.fr/hal-00371565/PDF/mde-stateoftheart.pdf},
  url = {http://hal.archives-ouvertes.fr/hal-00371565}
}

@PHDTHESIS{combemale08,
  author = {Benoit Combemale},
  title = {Approche de m{\'e}tamod{\'e}lisation pour la simulation et la v{\'e}rification
	de mod{\`e}le -- Application {\`a} l'ing{\'e}nierie des proc{\'e}d{\'e}s},
  school = {Institut National Polytechnique, Universit{\'e} de Toulouse},
  year = {2008},
  month = jul,
  note = {in french},
  date-added = {2011-10-16 17:03:18 +0200},
  date-modified = {2011-10-16 17:09:31 +0200},
  file = {combemale\:08.pdf:theses/combemale\:08.pdf:PDF},
  keywords = {modeling},
  url = {http://ethesis.inp-toulouse.fr/archive/00000666/}
}

@ARTICLE{jsw09,
  author = {Benoît Combemale and Xavier Crégut and Pierre-Lo\"{\i}c Garoche and
	Xavier Thirioux},
  title = {Essay on Semantics Definition in MDE. An Instrumented Approach for
	Model Verification},
  journal = {Journal of Software},
  year = {2009},
  volume = {4},
  pages = {943-958},
  number = {6},
  file = {jsw09_2343-6173-1-PB.pdf:jsw09_2343-6173-1-PB.pdf:PDF}
}

@ARTICLE{[Combemale:EIS:2009],
  author = {Combemale, Benoit and Crégut, Xavier and Garoche, Pierre-Loïc and
	Thirioux, Xavier and Vernadat, F.},
  title = {A Property-Driven Approach to Formal Verification of Process Models},
  journal = {Enterprise Information Systems, LNBIP 12, ICEIS 2007, Revised Selected
	Papers},
  year = {2009},
  volume = {12},
  pages = {286--300},
  address = {http://www.springerlink.com/},
  file = {[Combemale\:EIS\:2009].pdf:[Combemale\:EIS\:2009].pdf:PDF},
  language = {anglais},
  publisher = {Springer-Verlag}
}

@INPROCEEDINGS{combemale07,
  author = {Beno\^{\i}t Combemale and Pierre-Lo\"{\i}c Garoche and Xavier Cr{\'e}gut
	and Xavier Thirioux and Fran\c{c}ois Vernadat},
  title = {Towards a Formal Verification of Process Model's Properties SIMPLEPDL
	and TOCL Case Study},
  booktitle = {ICEIS (3)},
  year = {2007},
  pages = {80-89},
  date-added = {2011-10-15 13:33:46 +0200},
  date-modified = {2011-10-16 12:46:11 +0200},
  file = {combemale07-ICEIS07-CGCTV-CameraReady.pdf:combemale07-ICEIS07-CGCTV-CameraReady.pdf:PDF},
  keywords = {modeling}
}

@ARTICLE{Cordy06,
  author = {James R. Cordy},
  title = {The TXL source transformation language},
  journal = {Sci. Comput. Program.},
  year = {2006},
  volume = {61},
  pages = {190-210},
  number = {3},
  ee = {http://dx.doi.org/10.1016/j.scico.2006.04.002}
}

@ARTICLE{Cormode2009,
  author = {Cormode, Graham},
  title = {How NOT to review a paper: the tools and techniques of the adversarial
	reviewer},
  journal = {SIGMOD Rec.},
  year = {2009},
  volume = {37},
  pages = {100--104},
  number = {4},
  month = mar,
  acmid = {1519122},
  address = {New York, NY, USA},
  doi = {10.1145/1519103.1519122},
  file = {Cormode2009_howNOTtoreviewapaper.pdf:Cormode2009_howNOTtoreviewapaper.pdf:PDF},
  issn = {0163-5808},
  issue_date = {December 2008},
  numpages = {5},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1519103.1519122}
}

@ARTICLE{ibm06,
  author = {Czarnecki, K. and Helsen, S.},
  title = {Feature-based survey of model transformation approaches},
  journal = {IBM Systems Journal},
  year = {2006},
  volume = {45},
  pages = {621 -645},
  number = {3},
  month = { },
  abstract = {Model transformations are touted to play a key role in Model Driven
	Development #x2122;. Although well-established standards for creating
	metamodels such as the Meta-Object Facility exist, there is currently
	no mature foundation for specifying transformations among models.
	We propose a framework for the classification of several existing
	and proposed model transformation approaches. The classification
	framework is given as a feature model that makes explicit the different
	design choices for model transformations. Based on our analysis of
	model transformation approaches, we propose a few major categories
	in which most approaches fit.},
  doi = {10.1147/sj.453.0621},
  file = {ibm06.pdf:ibm06.pdf:PDF},
  issn = {0018-8670}
}

@INPROCEEDINGS{Czarnecki2003,
  author = {Krzysztof Czarnecki and Simon Helsen},
  title = {Classification of Model Transformation Approaches},
  booktitle = {Proceedings of the 2nd OOPSLA Workshop on Generative Techniques in
	the Context of the Model Driven Architecture},
  year = {2003},
  volume = {45},
  number = {3},
  pages = {1--17},
  comment = {K. Czarnecki and S. Helsen. Classification of model transformation
	approaches. In Proceedings of the 2nd OOPSLA Workshop on Generative
	Technique in the Context of the Model Driven Architecture, Anaheim,
	October 2003.},
  file = {Czarnecki2003_ClassificationofModelTransformationsApproaches.pdf:Czarnecki2003_ClassificationofModelTransformationsApproaches.pdf:PDF}
}


@ARTICLE{Deursen1993,
  author = {A. van Deursen and P. Klint and F. Tip},
  title = {Origin tracking},
  journal = {Journal of Symbolic Computation},
  year = {1993},
  volume = {15},
  pages = {523 - 545},
  number = {5-6},
  abstract = {We are interested in generating interactive programming environments
	from formal language specifications and use term rewriting to execute
	these specifications. Functions defined in a specification operate
	on the abstract syntax tree of programs and the initial term for
	the rewriting process will consist of an application of some function
	(e.g., a type checker, evaluator or translator) to the syntax tree
	of a program. During the term rewriting process, pieces of the program
	such as identifiers, expressions, or statements, recur in intermediate
	terms. We want to formalize these recurrences and use them, for example,
	for associating positional information with messages in error reports,
	visualizing program execution, and constructing language-specific
	debuggers. Origins are relations between subterms of intermediate
	terms and subterms of the initial term. Origin tracking is a method
	for incrementally computing origins during rewriting. We give a formal
	definition of origins, and present a method for implementing origin
	tracking.},
  doi = {10.1016/S0747-7171(06)80004-0},
  file = {Deursen1993-OriginTracking.pdf:Deursen1993-OriginTracking.pdf:PDF;Deursen1993_OriginTracking.pdf:Deursen1993_OriginTracking.pdf:PDF},
  issn = {0747-7171},
  url = {http://www.sciencedirect.com/science/article/pii/S0747717106800040}
}

@ARTICLE{Diaw2010,
  author = {Samba Diaw and R{\'e}douane Lbath and Bernard Coulette},
  title = {{\'E}tat de l'art sur le d{\'e}veloppement logiciel bas{\'e} sur
	les transformations de mod{\`e}les},
  journal = {Technique et Science Informatiques},
  year = {2010},
  volume = {29},
  pages = {505-536},
  number = {4-5},
  ee = {http://dx.doi.org/10.3166/tsi.29.505-536},
  file = {Diaw2010_EtatdelArtsurleDevLogicielBasesirlesTransfodeModeles.pdf:Diaw2010_EtatdelArtsurleDevLogicielBasesirlesTransfodeModeles.pdf:PDF}
}

@INPROCEEDINGS{Dolques2009,
  author = {Dolques, Xavier and Huchard, Marianne and Nebut, Cl{\'e}mentine and
	others},
  title = {From transformation traces to transformation rules: Assisting model
	driven engineering approach with formal concept analysis},
  booktitle = {ICCS'09: 17th International Conference on Conceptual Structures},
  year = {2009},
  pages = {093--106},
  file = {Dolques2009_FromTransformationTracestoTransformationRules\:assistingMDEApproachwithFormalConceptAnalysis.pdf:Dolques2009_FromTransformationTracestoTransformationRules\:assistingMDEApproachwithFormalConceptAnalysis.pdf:PDF}
}

@INCOLLECTION{Dougherty2007,
  author = {Dougherty, Daniel and Kirchner, Claude and Kirchner, Hélène and Santana de Oliveira, Anderson},
  title = {Modular Access Control Via Strategic Rewriting},
  booktitle = {Computer Security %G–%@ ESORICS 2007},
  publisher = {Springer Berlin / Heidelberg},
  year = {2007},
  editor = {Biskup, Joachim and L�pez, Javier},
  volume = {4734},
  series = {Lecture Notes in Computer Science},
  pages = {578-593},
  abstract = {Security policies, in particular access control, are fundamental elements
	of computer security. We address the problem of authoring and analyzing
	policies in a modular way using techniques developed in the field
	of term rewriting, focusing especially on the use of rewriting strategies.
	Term rewriting supports a formalization of access control with a
	clear declarative semantics based on equational logic and an operational
	semantics guided by strategies. Well-established term rewriting techniques
	allow us to check properties of policies such as the absence of conflicts
	and the property of always returning a decision. A rich language
	for expressing rewriting strategies is used to define a theory of
	modular construction of policies, in which we can better understand
	the preservation of properties of policies under composition. The
	robustness of the approach is illustrated on the composition operators
	of XACML .},
  affiliation = {Worcester Polytechnic Institute},
  file = {Dougherty2007_ModularAccessControdViaStrategicProgramming.pdf:Dougherty2007_ModularAccessControdViaStrategicProgramming.pdf:PDF},
  isbn = {978-3-540-74834-2},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-540-74835-9_38}
}

@MANUAL{kermeta10,
  title = {Kermeta Language, Reference Manual},
  author = {Drey, Zoé and Faucher, Cyril and Fleurey, Franck and Mahé, Vincent
	and Vojtisek, Didier},
  year = {2010},
  date-added = {2011-10-15 13:12:42 +0200},
  date-modified = {2011-10-15 13:16:34 +0200},
  keywords = {modeling},
  url = {http://www.kermeta.org/docs/fr.irisa.triskell.kermeta.documentation/build/pdf.fop/KerMeta-Manual/KerMeta-Manual.pdf}
}

@INCOLLECTION{Ehrig2004,
  author = {Ehrig, Hartmut and Prange, Ulrike and Taentzer, Gabriele},
  title = {Fundamental Theory for Typed Attributed Graph Transformation},
  booktitle = {Graph Transformations},
  publisher = {Springer Berlin / Heidelberg},
  year = {2004},
  editor = {Ehrig, Hartmut and Engels, Gregor and Parisi-Presicce, Francesco
	and Rozenberg, Grzegorz},
  volume = {3256},
  series = {Lecture Notes in Computer Science},
  pages = {161-177},
  note = {10.1007/978-3-540-30203-2_13},
  abstract = {The concept of typed attributed graph transformation is most significant
	for modeling and meta modeling in software engineering and visual
	languages, but up to now there is no adequate theory for this important
	branch of graph transformation. In this paper we give a new formalization
	of typed attributed graphs, which allows node and edge attribution.
	The first main result shows that the corresponding category is isomorphic
	to the category of algebras over a specific kind of attributed graph
	structure signature. This allows to prove the second main result
	showing that the category of typed attributed graphs is an instance
	of -Y�adhesive HLR categories�. This new concept combines adhesive
	categories introduced by Lack and Soboci-B�ski with the well-known
	approach of high-level replacement (HLR) systems using a new simplified
	version of HLR conditions. As a consequence we obtain a rigorous
	approach to typed attributed graph transformation providing as fundamental
	results the Local Church-Rosser, Parallelism, Concurrency, Embedding
	and Extension Theorem and a Local Confluence Theorem known as Critical
	Pair Lemma in the literature.},
  affiliation = {Technical University of Berlin, Germany},
  file = {Ehrig2004_FundamentalTheoryforTypedAttributedGraphTransformation.pdf:Ehrig2004_FundamentalTheoryforTypedAttributedGraphTransformation.pdf:PDF},
  isbn = {978-3-540-23207-0},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-540-30203-2_13}
}

@INPROCEEDINGS{Falleri2006,
  author = {Falleri, Jean-R{\'e}my and Huchard, Marianne and Nebut, Cl{\'e}mentine
	and others},
  title = {Towards a traceability framework for model transformations in kermeta},
  booktitle = {ECMDA-TW'06: ECMDA Traceability Workshop},
  year = {2006},
  pages = {31--40},
  file = {Falleri2006_TowardsaTraceabilityFrameworkforModelTransformationsinKermeta.PDF:Falleri2006_TowardsaTraceabilityFrameworkforModelTransformationsinKermeta.PDF:PDF}
}

@INPROCEEDINGS{Feiler2006,
  author = {Feiler, Peter H. and Lewis, Bruce A. and Vestal, Steve},
  title = {The SAE Architecture Analysis \& Design Language (AADL) a standard
	for engineering performance critical systems},
  booktitle = {Computer Aided Control System Design, 2006 IEEE International Conference
	on Control Applications, 2006 IEEE International Symposium on Intelligent
	Control, 2006 IEEE},
  year = {2006},
  pages = {1206 -1211},
  month = {oct.},
  abstract = {The Society of Automotive Engineers (SAE) Architecture Analysis &
	Design Language, AS5506, provides a means for the formal specification
	of the hardware and software architecture of embedded computer systems
	and system of systems. It was designed to support a full Model Based
	Development lifecycle including system specification, analysis, system
	tuning, integration, and upgrade over the lifecycle. It was designed
	to support the integration of multiple forms of analyses and to be
	extensible in a standard way for additional analysis approaches.
	A system can be automatically integrated from AADL models when fully
	specified and when source code is provided for the software components.
	Analysis of large complex systems has been demonstrated in the avionics
	domain.},
  doi = {10.1109/CACSD-CCA-ISIC.2006.4776814},
  file = {Feiler2006_TheSAEArchiAnalysisDesignLanguage(AADL)AStandardforENgineeringPerfCritSyst.pdf:Feiler2006_TheSAEArchiAnalysisDesignLanguage(AADL)AStandardforENgineeringPerfCritSyst.pdf:PDF}
}

@ARTICLE{Fokkink2000,
  author = {Fokkink, Wan and Kamperman, Jasper and Walters, Pum},
  title = {Lazy rewriting on eager machinery},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {2000},
  volume = {22},
  pages = {45--86},
  month = {January},
  acmid = {345102},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/345099.345102},
  file = {Fokkink2000_LazyRewritingonEagerMachinery.pdf:Fokkink2000_LazyRewritingonEagerMachinery.pdf:PDF},
  issn = {0164-0925},
  issue = {1},
  keywords = {innermost reduction, lazy rewriting, specificity ordering},
  numpages = {42},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/345099.345102}
}

@ARTICLE{Fong2009,
  author = {Fong, Philip W.L.},
  title = {Reading a computer science research paper},
  journal = {SIGCSE Bull.},
  year = {2009},
  volume = {41},
  pages = {138--140},
  number = {2},
  month = jun,
  acmid = {1595493},
  address = {New York, NY, USA},
  doi = {10.1145/1595453.1595493},
  file = {Fong2009_ReadingaCSResearchPaper.pdf:Fong2009_ReadingaCSResearchPaper.pdf:PDF},
  issn = {0097-8418},
  issue_date = {June 2009},
  keywords = {graduate education, paper review, reading research papers},
  numpages = {3},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1595453.1595493}
}

@MISC{RapportDfoures,
  author = {Foures, Damien},
  title = {{Transformation des diagrammes d'activit{\'e}s SysML1.2 vers les
	r{\'e}seaux de Petri dans un cadre MDE}},
  month = Jul,
  year = {2012},
  note = {Rapport Laboratoire },
  abstract = {{Cette {\'e}tude cherche {\`a} automatiser la transformation des diagrammes
	d'activit{\'e}s (DA) vers les r{\'e}seaux de Petri. En nous basant
	sur les sp{\'e}cifications de l'Object Management Group (OMG), nous
	avons {\'e}tabli les r{\`e}gles de transformation en ATLAS Transformation
	Langage (ATL) pour obtenir un mod{\`e}le conforme {\`a} notre m{\'e}ta-mod{\`e}le
	r{\'e}seaux de Petri. La s{\'e}mantique du diagramme d'activit{\'e}
	a {\'e}t{\'e} valid{\'e}e {\`a} l'aide de la transformation PetriNet2Tina
	qui va permettre de v{\'e}rifier de fa{\c c}on formelle la correspondance
	s{\'e}mantique entre les deux mod{\`e}les apr{\`e}s transformation.
	Cette v{\'e}rification est effectu{\'e}e avec le "model-checker"
	TIme petri Net Analyser (TINA) et le langage Linear Temporal Logic
	(LTL). L'utilisateur devra simplement {\'e}tablir le diagramme d'activit{\'e}
	{\`a} partir des exigences des parties prenantes, la transformation
	et la v{\'e}rification {\'e}tant automatiques. Le formalisme des
	R{\'e}seaux de Petri nous permet de fournir de pr{\'e}cieuses informations
	sur le diagramme d'activit{\'e} pour le jouer et le simuler.}},
  affiliation = {Laboratoire d'analyse et d'architecture des syst{\`e}mes - LAAS},
  file = {RapportDfoures.pdf:RapportDfoures.pdf:PDF},
  hal_id = {hal-00761053},
  keywords = {ATL ; Transformation; Mod{\'e}lisation; MDE; MDA; IDM; Automatisation;
	LTL ; validation; verification},
  language = {Fran{\c c}ais},
  pages = {55p},
  pdf = {http://hal.archives-ouvertes.fr/hal-00761053/PDF/RapportDfoures.pdf},
  url = {http://hal.archives-ouvertes.fr/hal-00761053}
}

@INPROCEEDINGS{Galvao2007,
  author = {Galvao, I. and Goknil, A.},
  title = {Survey of Traceability Approaches in Model-Driven Engineering},
  booktitle = {Enterprise Distributed Object Computing Conference, 2007. EDOC 2007.
	11th IEEE International},
  year = {2007},
  pages = {313},
  month = {oct.},
  abstract = {Models have been used in various engineering fields to help managing
	complexity and represent information in different abstraction levels,
	according to specific notations and stakeholder's viewpoints. Model-Driven
	Engineering (MDE) gives the basic principles for the use of models
	as primary artefacts throughout the software development phases and
	presents characteristics that simplify the engineering of software
	in various domains, such as Enterprise Computing Systems. Hence,
	for its successful application, MDE processes must consider traceability
	practices. They help the understanding, capturing, tracking and verification
	of software artefacts and their relationships and dependencies with
	other artefacts during the software life-cycle. In this survey, we
	discuss the state-of-the-art in traceability approaches in MDE and
	assess them with respect to five general comparison criteria: representation,
	mapping, scalability, change impact analysis and tool support. As
	a complementary result, we have identified some open issues that
	can be better explored by traceability in MDE.},
  doi = {10.1109/EDOC.2007.42},
  file = {Galvao2007_SurveyofTraceabilityApproachesinMDE.pdf:Galvao2007_SurveyofTraceabilityApproachesinMDE.pdf:PDF},
  issn = {1541-7719},
  keywords = {Application software;Computer science;Distributed computing;Engineering
	management;Model driven engineering;Programming;Reverse engineering;Scalability;Software
	engineering;Software systems;computational complexity;software engineering;abstraction
	levels;complexity management;enterprise computing systems;impact
	analysis;model-driven engineering;software development;software engineering;software
	life-cycle;traceability approaches;}
}

@INPROCEEDINGS{Gonzalez2012,
  author = {Gonzalez, C.A. and Buttner, F. and Clariso, R. and Cabot, J.},
  title = {EMFtoCSP: A tool for the lightweight verification of EMF models},
  booktitle = {Software Engineering: Rigorous and Agile Approaches (FormSERA), 2012
	Formal Methods in},
  year = {2012},
  pages = {44 -50},
  month = {june},
  abstract = {The increasing popularity of MDE results in the creation of larger
	models and model transformations, hence converting the specification
	of MDE artefacts in an error-prone task. Therefore, mechanisms to
	ensure quality and absence of errors in models are needed to assure
	the reliability of the MDE-based development process. Formal methods
	have proven their worth in the verification of software and hardware
	systems. However, the adoption of formal methods as a valid alternative
	to ensure model correctness is compromised for the inner complexity
	of the problem. To circumvent this complexity, it is common to impose
	limitations such as reducing the type of constructs that can appear
	in the model, or turning the verification process from automatic
	into user assisted. Since we consider these limitations to be counterproductive
	for the adoption of formal methods, in this paper we present EMFtoCSP,
	a new tool for the fully automatic, decidable and expressive verification
	of EMF models that uses constraint logic programming as the underlying
	formalism.},
  doi = {10.1109/FormSERA.2012.6229788},
  keywords = {EMFtoCSP;MDE artefacts specification;MDE-based development process
	reliability;automatic verification process;constraint logic programming;error-prone
	task;formal methods;hardware verification;lightweight EMF models
	verification;model transformations;problem complexity;software verification;user
	assisted verification process;computational complexity;constraint
	handling;formal verification;software reliability;}
}

@ARTICLE{Greenyer2010,
  author = {Greenyer, Joel and Kindler, Ekkart},
  title = {Comparing relational model transformation technologies: implementing
	Query/View/Transformation with Triple Graph Grammars},
  journal = {Software and Systems Modeling},
  year = {2010},
  volume = {9},
  pages = {21-46},
  note = {10.1007/s10270-009-0121-8},
  abstract = {The Model Driven Architecture (MDA) is an approach to develop software
	based on different models. There are separate models for the business
	logic and for platform specific details. Moreover, code can be generated
	automatically from these models. This makes transforma- tions a core
	technology for MDA and for model-based software engineering approaches
	in general. Query/View/Transformation (QVT) is the transformation
	technology recently proposed for this purpose by the OMG. Triple
	Graph Grammars (TGGs) are another transformation technology proposed
	in the mid-nineties, used for example in the FUJABA CASE tool. In
	contrast to many other transformation technologies, both QVT and
	TGGs declaratively define the relation between two models. With this
	definition, a transformation engine can execute a transformation
	in either direction and, based on the same definition, can also propagate
	changes from one model to the other. In this paper, we compare the
	concepts of the declarative languages of QVT and TGGs. It turns out
	that TGGs and declarative QVT have many concepts in common. In fact,
	QVT-Core can be mapped to TGGs. We show that QVT-Core can be implemented
	by transforming QVT-Core mappings to TGG rules, which can then be
	executed by a TGG transformation engine that performs the actual
	QVT transformation. Furthermore, we discuss an approach for mapping
	QVT-Relations to TGGs. Based on the semantics of TGGs, we clarify
	semantic gaps that we identified in the declarative languages of
	QVT and, furthermore, we show how TGGs can benefit from the concepts
	of QVT.},
  affiliation = {University of Paderborn Software Engineering Group Warburger Str.
	100 33098 Paderborn Germany},
  file = {Greenyer2010_ComparingRelationalModelTransfoTechno\:implementingQVTWithTGG.pdf:Greenyer2010_ComparingRelationalModelTransfoTechno\:implementingQVTWithTGG.pdf:PDF},
  issn = {1619-1366},
  issue = {1},
  keyword = {Computer Science},
  publisher = {Springer Berlin / Heidelberg},
  url = {http://dx.doi.org/10.1007/s10270-009-0121-8}
}

@INCOLLECTION{Groenmo2009,
  author = {Grønmo, Roy and Møller-Pedersen, Birger and Olsen, Gøran},
  title = {Comparison of Three Model Transformation Languages},
  booktitle = {Model Driven Architecture - Foundations and Applications},
  publisher = {Springer Berlin / Heidelberg},
  year = {2009},
  editor = {Paige, Richard and Hartman, Alan and Rensink, Arend},
  volume = {5562},
  series = {Lecture Notes in Computer Science},
  pages = {2-17},
  abstract = {In this paper we compare three model transformation languages: 1)
	Concrete syntax-based graph transformation (CGT) which is our emerging
	model transformation language, 2) Attributed Graph Grammar (AGG)
	representing traditional graph transformation, and 3) Atlas Transformation
	Language (ATL) representing model transformation. Our case study
	is a fairly complicated refactoring of UML activity models. The case
	study shows that CGT rules are more concise and requires considerably
	less effort from the modeler, than with AGG and ATL. With AGG and
	ATL, the transformation modeler needs access to and knowledge of
	the metamodel and the representation in the abstract syntax. In CGT
	rules on the other hand, the transformation modeler can concentrate
	on the familiar concrete syntax of the source and target languages.},
  affiliation = {Department of Informatics, University of Oslo, Norway},
  file = {Groenmo2009_ComparisonOfThreeModelTransformationLanguages.pdf:Groenmo2009_ComparisonOfThreeModelTransformationLanguages.pdf:PDF},
  isbn = {978-3-642-02673-7},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-02674-4_2}
}

@ARTICLE{Hemel2010,
  author = {Zef Hemel and Lennart C. L. Kats and Danny M. Groenewegen and Eelco
	Visser},
  title = {Code generation by model transformation: a case study in transformation
	modularity},
  journal = {Software and System Modeling},
  year = {2010},
  volume = {9},
  pages = {375-402},
  number = {3},
  ee = {http://dx.doi.org/10.1007/s10270-009-0136-1},
  file = {Hemel2010_CodeGenerationbyModelTransformationACaseStudyinTransformationModularity.pdf:Hemel2010_CodeGenerationbyModelTransformationACaseStudyinTransformationModularity.pdf:PDF}
}

@INCOLLECTION{Hemel2010a,
  author = {Hemel, Zef and Visser, Eelco},
  title = {{PIL: A Platform Independent Language for Retargetable DSLs}},
  booktitle = {Software Language Engineering},
  publisher = {Springer Berlin / Heidelberg},
  year = {2010},
  editor = {van den Brand, Mark and Gaševic, Dragan and Gray, Jeff},
  volume = {5969},
  series = {Lecture Notes in Computer Science},
  pages = {224-243},
  note = {10.1007/978-3-642-12107-4_17},
  abstract = {Intermediate languages are used in compiler construction to simplify
	retargeting compilers to multiple machine architectures. In the implementation
	of domain-specific languages (DSLs), compilers typically generate
	high-level source code, rather than low-level machine instructions.
	DSL compilers target a software platform, i.e. a programming language
	with a set of libraries, deployable on one or more operating systems.
	DSLs enable targeting multiple software platforms if its abstractions
	are platform independent. While transformations from DSL to each
	targeted platform are often conceptually very similar, there is little
	reuse between transformations due to syntactic and API differences
	of the target platforms, making supporting multiple platforms expensive.
	In this paper, we discuss the design and implementation of PIL, a
	Platform Independent Language, an intermediate language providing
	a layer of abstraction between DSL and target platform code, abstracting
	from syntactic and API differences between platforms, thereby removing
	the need for platform-specific transformations. We discuss the use
	of PIL in an implemementation of WebDSL, a DSL for building web applications.},
  affiliation = {Software Engineering Research Group, Delft University of Technology,
	The Netherlands},
  file = {Hemel2010a_PILAPlatfprmIndependantLanguageforRetargetableDSLs.pdf:Hemel2010a_PILAPlatfprmIndependantLanguageforRetargetableDSLs.pdf:PDF},
  isbn = {978-3-642-12106-7},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-12107-4_17}
}

@INCOLLECTION{Horn2011,
  author = {Horn, Tassilo and Ebert, J�rgen},
  title = {{The GReTL Transformation Language}},
  booktitle = {Theory and Practice of Model Transformations},
  publisher = {Springer Berlin / Heidelberg},
  year = {2011},
  editor = {Cabot, Jordi and Visser, Eelco},
  volume = {6707},
  series = {Lecture Notes in Computer Science},
  pages = {183-197},
  note = {10.1007/978-3-642-21732-6_13},
  abstract = {This paper introduces the graph-based transformation language GReTL.
	GReTL is an operational transformation language whose operations
	are either specified in plain Java using the GReTL API or in a simple
	domain-specific language. GReTL follows the conception of incrementally
	constructing the target metamodel together with the target graph.
	When creating a new metamodel element, a set-based semantic expression
	is specified that describes the set of instances that have to be
	created in the target graph. This expression is described by a query
	on the source graph. After a description of the foundations of GReTL,
	its most important elements are introduced along with a simple example.},
  affiliation = {Institute for Software Technology, University Koblenz-Landau, Germany},
  isbn = {978-3-642-21731-9},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-21732-6_13}
}

@ARTICLE{Jakumeit2010,
  author = {Jakumeit, Edgar and Buchwald, Sebastian and Kroll, Moritz},
  title = {GrGen.NET},
  journal = {International Journal on Software Tools for Technology Transfer},
  year = {2010},
  volume = {12},
  pages = {263-271},
  abstract = {GrGen.NET is a generative programming system for graph rewriting,
	transforming intuitive and expressive rewrite rule specifications
	into highly efficient .NET code. The user is supported by a convenient
	environment consisting of a graph viewer, an interactive shell with
	integrated debugging support, and an elegant domain-specific language
	for the combination of rewrite rules. After rapid prototyping with
	these tools, the resulting graph transformation programmes can be
	easily integrated into arbitrary .NET applications to serve as the
	algorithmic kernel. Expressiveness, convenience, and speed are exemplified
	by GrGen-solutions to the case studies AntWorld, Refactoring, and
	Conference Scheduling besides others.},
  doi = {10.1007/s10009-010-0148-8},
  file = {Jakumeit2010_GrGen.NET.pdf:Jakumeit2010_GrGen.NET.pdf:PDF},
  issn = {1433-2779},
  issue = {3-4},
  keywords = {General purpose graph transformation; Graph rewriting; Domain-specific
	language; Generative programming tool; Search-plan-driven graph pattern
	matching},
  language = {English},
  publisher = {Springer-Verlag},
  url = {http://dx.doi.org/10.1007/s10009-010-0148-8}
}

@INCOLLECTION{Jonge2012,
  author = {de Jonge, Maartje and Visser, Eelco},
  title = {{An Algorithm for Layout Preservation in Refactoring Transformations}},
  booktitle = {Software Language Engineering},
  publisher = {Springer Berlin / Heidelberg},
  year = {2012},
  editor = {Sloane, Anthony and A�mann, Uwe},
  volume = {6940},
  series = {Lecture Notes in Computer Science},
  pages = {40-59},
  note = {10.1007/978-3-642-28830-2_3},
  abstract = {Transformations and semantic analysis for source-to-source transformations
	such as refactorings are most effectively implemented using an abstract
	representation of the source code. An intrinsic limitation of transformation
	techniques based on abstract syntax trees is the loss of layout,
	i.e. comments and whitespace. This is especially relevant in the
	context of refactorings, which produce source code for human consumption.
	In this paper, we present an algorithm for fully automatic source
	code reconstruction for source-to-source transformations. The algorithm
	preserves the layout and comments of the unaffected parts and reconstructs
	the indentation of the affected parts, using a set of clearly defined
	heuristic rules to handle comments.},
  affiliation = {Dept. of Software Technology, Delft University of Technology, The
	Netherlands},
  file = {Jonge2012_AnAlgorithmforLayoutPreservationinRefactoringTransformations.pdf:Jonge2012_AnAlgorithmforLayoutPreservationinRefactoringTransformations.pdf:PDF},
  isbn = {978-3-642-28829-6},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-28830-2_3}
}

@INPROCEEDINGS{Jouault2005,
  author = {Frédéric Jouault},
  title = {{Loosely Coupled Traceability for ATL}},
  booktitle = {In Proceedings of the European Conference on Model Driven Architecture
	(ECMDA) workshop on traceability},
  year = {2005},
  pages = {29--37},
  file = {Jouault2005-ECMDATraceability05.pdf:Jouault2005-ECMDATraceability05.pdf:PDF}
}

@ARTICLE{JouaultABK08,
  author = {Jouault, Fr\'{e}d\'{e}ric and Allilaire, Freddy and B\'{e}zivin,
	Jean and Kurtev, Ivan},
  title = {{ATL: A model transformation tool}},
  journal = {Science of Computer Programming},
  year = {2008},
  volume = {72},
  pages = {31--39},
  number = {1-2},
  month = jun,
  abstract = {{In the context of Model Driven Engineering, models are the main development
	artifacts and model transformations are among the most important
	operations applied to models. A number of specialized languages have
	been proposed, aimed at specifying model transformations. Apart from
	the software engineering properties of transformation languages,
	the availability of high quality tool support is also of key importance
	for the industrial adoption and ultimate success of MDE. In this
	paper we present ATL: a model transformation language and its execution
	environment based on the Eclipse framework. ATL tools provide support
	for the major tasks involved in using a language: editing, compiling,
	executing, and debugging.}},
  citeulike-article-id = {3851441},
  citeulike-linkout-0 = {http://dx.doi.org/10.1016/j.scico.2007.08.002},
  citeulike-linkout-1 = {http://linkinghub.elsevier.com/retrieve/pii/S0167642308000439},
  day = {01},
  doi = {10.1016/j.scico.2007.08.002},
  file = {Jouault08-SCP.pdf:Jouault08-SCP.pdf:PDF;JouaultABK08-SCP.pdf:JouaultABK08-SCP.pdf:PDF},
  issn = {01676423},
  keywords = {mde, model\_transformations},
  posted-at = {2009-07-09 13:06:28},
  priority = {2},
  url = {http://dx.doi.org/10.1016/j.scico.2007.08.002}
}

@INPROCEEDINGS{Jouault2006a,
  author = {Jouault, Fr\'{e}d\'{e}ric and Allilaire, Freddy and B\'{e}zivin,
	Jean and Kurtev, Ivan and Valduriez, Patrick},
  title = {{ATL: a QVT-like transformation language}},
  booktitle = {Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming
	systems, languages, and applications},
  year = {2006},
  series = {OOPSLA '06},
  pages = {719--720},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1176691},
  doi = {http://doi.acm.org/10.1145/1176617.1176691},
  file = {Jouault2006a-ATL.aQVT-likeTransformationLanguage.pdf:Jouault2006a-ATL.aQVT-likeTransformationLanguage.pdf:PDF},
  isbn = {1-59593-491-X},
  keywords = {ATL, QVT, model transformation, model-driven engineering},
  location = {Portland, Oregon, USA},
  numpages = {2},
  url = {http://doi.acm.org/10.1145/1176617.1176691}
}

@INCOLLECTION{Jouault2006,
  author = {Jouault, Frédéric and Kurtev, Ivan},
  title = {Transforming Models with ATL},
  booktitle = {Satellite Events at the MoDELS 2005 Conference},
  publisher = {Springer Berlin / Heidelberg},
  year = {2006},
  editor = {Bruel, Jean-Michel},
  volume = {3844},
  series = {Lecture Notes in Computer Science},
  pages = {128-138},
  affiliation = {ATLAS Group, (INRIA & LINA, University of Nantes)},
  file = {Jouault2006-transformingModelswithATL.pdf:Jouault2006-transformingModelswithATL.pdf:PDF},
  isbn = {978-3-540-31780-7},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/11663430_14}
}

@INPROCEEDINGS{kermeta09,
  author = {Jézéquel, Jean-Marc and Barais, Olivier and Fleurey, Franck},
  title = {Model driven language engineering with kermeta},
  booktitle = {Proceedings of the 3rd international summer school conference on
	Generative and transformational techniques in software engineering
	III},
  year = {2011},
  series = {GTTSE'09},
  pages = {201--221},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid = {1949931},
  date-added = {2011-10-15 13:18:20 +0200},
  date-modified = {2011-10-15 13:19:32 +0200},
  isbn = {3-642-18022-1, 978-3-642-18022-4},
  keywords = {modeling},
  location = {Braga, Portugal},
  numpages = {21},
  url = {http://dl.acm.org/citation.cfm?id=1949925.1949931}
}

@INPROCEEDINGS{Khoroshilov2011,
  author = {Khoroshilov, A. and Koverninskiy, I. and Petrenko, A. and Ugnenko,
	A.},
  title = {Integrating AADL-Based Tool Chain into Existing Industrial Processes},
  booktitle = {Engineering of Complex Computer Systems (ICECCS), 2011 16th IEEE
	International Conference on},
  year = {2011},
  pages = {367 -371},
  month = {april},
  abstract = {The paper presents a case study of building solution for automation
	of Integrated Modular Avionics system design and system integration
	processes within existing industrial environment on base of model
	driven approaches. Features of modern architecture description language
	are discussed and experience of building a tool chain on top of one
	of them is described.},
  doi = {10.1109/ICECCS.2011.45},
  file = {Khoroshilov2011_IntegratingAADLbasedToolChainintoExistingIndusProcess.pdf:Khoroshilov2011_IntegratingAADLbasedToolChainintoExistingIndusProcess.pdf:PDF},
  keywords = {AADL-based tool chain;architecture description language;industrial
	processes;integrated modular avionics system design automation;model
	driven approaches;system integration processes;avionics;software
	architecture;specification languages;}
}

@INPROCEEDINGS{tavares09,
  author = {Claude Kirchner and Pierre-Etienne Moreau and Cl{\'a}udia Tavares},
  title = {A Type System for Tom},
  booktitle = {RULE},
  year = {2009},
  pages = {51-63},
  date-added = {2011-09-27 00:43:42 +0200},
  date-modified = {2011-09-27 00:59:36 +0200},
  ee = {http://dx.doi.org/10.4204/EPTCS.21.5},
  file = {tavares09_aTypeSystemforTom.pdf:tavares09_aTypeSystemforTom.pdf:PDF},
  keywords = {type systems, subtyping constraints, constraint solving}
}

@PHDTHESIS{Tavares2012,
  author = {Tavares, Cl{\'a}udia},
  title = {Un systeme de types pour la programmation par r{\'e}{\'e}criture
	embarqu{\'e}e},
  school = {Universit{\'e} Henri Poincar{\'e}-Nancy I},
  year = {2012}
}

@BOOK{Kleppe2003,
  title = {MDA Explained: The Model Driven Architecture: Practice and Promise},
  publisher = {Addison-Wesley Longman Publishing Co., Inc.},
  year = {2003},
  author = {Kleppe, Anneke G. and Warmer, Jos and Bast, Wim},
  address = {Boston, MA, USA},
  isbn = {032119442X}
}

@INPROCEEDINGS{Klint2011,
  author = {Klint, Paul and Hills, Mark and Van Den Bos, Jeroen and Van Der Storm,
	Tijs and Vinju, Jurgen},
  title = {Rascal: From Algebraic Specification to Meta-Programming},
  booktitle = {{Proceedings Second International Workshop on Algebraic Methods in
	Model-based Software Engineering (AMMSE)}},
  year = {2011},
  pages = {15-32},
  address = {Zurich, Suisse},
  affiliation = {ATEAMS - INRIA Lille - Nord Europe},
  audience = {internationale },
  file = {Klint2011_ammse11_RascalFromAlgebraicSpecToMetaProg.pdf:Klint2011_ammse11_RascalFromAlgebraicSpecToMetaProg.pdf:PDF},
  hal_id = {hal-00644689},
  language = {Anglais},
  url = {http://hal.inria.fr/hal-00644689}
}

@INCOLLECTION{Klint2011a,
  author = {Klint, Paul and van der Storm, Tijs and Vinju, Jurgen},
  title = {{EASY Meta-programming with Rascal}},
  booktitle = {Generative and Transformational Techniques in Software Engineering
	III},
  publisher = {Springer Berlin / Heidelberg},
  year = {2011},
  editor = {Fernandes, Jo{\~{a}}o and Lämmel, Ralf and Visser, Joost and Saraiva,
    Jo{\~{a}}o},
  volume = {6491},
  series = {Lecture Notes in Computer Science},
  pages = {222-289},
  abstract = {Rascal is a new language for meta-programming and is intended to solve
	problems in the domain of source code analysis and transformation.
	In this article we give a high-level overview of the language and
	illustrate its use by many examples. Rascal is a work in progress
	both regarding implementation and documentation. More information
	is available at http://www.rascal-mpl.org/.},
  affiliation = {Centrum Wiskunde & Informatica},
  isbn = {978-3-642-18022-4},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-18023-1_6}
}
%  note = {{10.1007/978-3-642-18023-1_6}},

@INPROCEEDINGS{KurtevBezAks2002,
  author = {I. Kurtev and J. B{\'e}zivin and M. Ak\c{s}it},
  title = {Technological Spaces: An Initial Appraisal},
  booktitle = {International Conference on Cooperative Information Systems (CoopIS),
	DOA'2002 Federated Conferences, Industrial Track, Irvine, USA},
  year = {2002},
  pages = {1--6},
  month = {October},
  abstract = {In this paper, we propose a high level view of technological spaces
	(TS) and relations among these spaces. A technological space is a
	working context with a set of associated concepts, body of knowledge,
	tools, required skills, and possibilities. It is often associated
	to a given user community with shared know-how, educational support,
	common literature and even workshop and conference regular meetings.
	Although it is difficult to give a precise definition, some TSs can
	be easily identified, e.g. the XML TS, the DBMS TS, the abstract
	syntax TS, the meta-model (OMG/MDA) TS, etc. The purpose of our work
	is not to define an abstract theory of technological spaces, but
	to figure out how to work more efficiently by using the best possibilities
	of each technology. To do so, we need a basic understanding of the
	similarities and differences between various TSs, and also of the
	possible operational bridges that will allow transferring the results
	obtained in one TS to other TS. We hope that the presented industrial
	vision may help us putting forward the idea that there could be more
	cooperation than competition among alternative technologies. Furthermore,
	as the spectrum of such available technologies is rapidly broadening,
	the necessity to offer clear guidelines when choosing practical solutions
	to engineering problems is becoming a must, not only for teachers
	but for project leaders as well.},
  eprint_note = {http://www.cs.rmit.edu.au/fedconf/2002/program.html#thursday},
  eprintid = {10206},
  event_dates = {30 Oct - 1 Nov 2002},
  event_type = {Conference},
  file = {KurtevBezAks2002_0363TechnologicalSpaces.pdf:KurtevBezAks2002_0363TechnologicalSpaces.pdf:PDF},
  howpublished = {http://eprints.eemcs.utwente.nl/10206/},
  international = {Yes},
  isbn = {not assigned},
  ispublished = {Published},
  location = {Irvine, USA},
  num_pages = {6},
  pres_types = {Talk},
  refereed = {Yes},
  research_groups = {EWI-SE: Software Engineering}
}

@INPROCEEDINGS{Kuster2004,
  author = {Jochen M. Kuster and Shane Sendall and Michael Wahler},
  title = {Comparing Two Model Transformation Approaches},
  year = {2004},
  owner = {jcb},
  timestamp = {2012.12.20}
}

@ARTICLE{MensG06,
  author = {Tom Mens and Pieter Van Gorp},
  title = {A Taxonomy of Model Transformation},
  journal = {Electr. Notes Theor. Comput. Sci.},
  year = {2006},
  volume = {152},
  pages = {125-142},
  ee = {http://dx.doi.org/10.1016/j.entcs.2005.10.021},
  file = {MensG06_ATaxonomyofModelTransformation.pdf:MensG06_ATaxonomyofModelTransformation.pdf:PDF}
}

@INCOLLECTION{Meseguer2004,
  author = {Meseguer, Jos� and Braga, Christiano},
  title = {Modular Rewriting Semantics of Programming Languages},
  booktitle = {Algebraic Methodology and Software Technology},
  publisher = {Springer Berlin / Heidelberg},
  year = {2004},
  editor = {Rattray, Charles and Maharaj, Savitri and Shankland, Carron},
  volume = {3116},
  series = {Lecture Notes in Computer Science},
  pages = {364-378},
  note = {10.1007/978-3-540-27815-3_29},
  abstract = {We present a general method to achieve modularity of semantic definitions
	of programming languages specified as rewrite theories. This provides
	modularity for a language specification method that combines and
	extends the best features of both SOS and algebraic semantics. The
	relationship to Mosses-F� modular operational semantics (MSOS) is
	explored in detail, yielding a semantics-preserving translation that
	could support execution and analysis of MSOS specifications in Maude.},
  affiliation = {University of Illinois at Urbana-Champaign, USA},
  isbn = {978-3-540-22381-8},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-540-27815-3_29}
}

@INCOLLECTION{Moreau2003,
  author = {Moreau, Pierre-Etienne and Ringeissen, Christophe and Vittek, Marian},
  title = {A Pattern Matching Compiler for Multiple Target Languages},
  booktitle = {Compiler Construction},
  publisher = {Springer Berlin / Heidelberg},
  year = {2003},
  editor = {Hedin, Görel},
  volume = {2622},
  series = {Lecture Notes in Computer Science},
  pages = {61-76},
  abstract = {Many processes can be seen as transformations of tree-like data structures.
	In compiler construction, for example, we continuously manipulate
	trees and perform tree transformations. This paper introduces a pattern
	matching compiler (Tom): a set of primitives which add pattern matching
	facilities to imperative languages such as C, Java, or Eiffel. We
	show that this tool is extremely non-intrusive, lightweight and useful
	to implement tree transformations. It is also flexible enough to
	allow the reuse of existing data structures.},
  affiliation = {LORIA-INRIA 615, rue du Jardin Botanique BP 101 54602 Villers-lès-Nancy
	Cedex France},
  isbn = {978-3-540-00904-7},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/3-540-36579-6_5}
}

@PHDTHESIS{mottu:tel-00514506,
  author = {Mottu, Jean-Marie},
  title = {{Oracles et qualification du test de transformations de mod{\`e}les}},
  school = {Universit{\'e} Rennes 1},
  year = {2008},
  type = {THESE},
  month = Nov,
  abstract = {{Dans l'Ing{\'e}nierie Dirig{\'e}e par les Mod{\`e}les, les mod{\`e}les
	sont des {\'e}l{\'e}ments productifs pour le d{\'e}veloppement logiciel.
	Ils sont exploit{\'e}s par les transformations de mod{\`e}les qui
	automatisent les {\'e}tapes du d{\'e}veloppement. Dans nos travaux
	de th{\`e}se, nous contribuons au test de transformations de mod{\`e}les
	en {\'e}tudiant cette probl{\'e}matique et en proposant des techniques
	de test adapt{\'e}es aux caract{\'e}ristiques et {\`a} l'emploi des
	transformations. Nous adaptons l'analyse de mutation pour qualifier
	les mod{\`e}les de test selon leur pouvoir de d{\'e}tection d'erreurs
	propres aux transformations. Nous proposons des fonctions d'oracles
	et {\'e}valuons leur ad{\'e}quation avec la complexit{\'e} et la
	r{\'e}utilisation d'une transformation. Enfin, nous exploitons nos
	travaux dans l'{\'e}tude d'une m{\'e}thode de d{\'e}veloppement de
	composants de confiance de transformation et nous proposons des outils
	permettant la mise en oeuvre et l'exp{\'e}rimentation de nos travaux
	et d'autres recherches sur le test de transformations de mod{\`e}les.}},
  affiliation = {Laboratoire d'Informatique de Nantes Atlantique - LINA , TRISKELL
	- INRIA - IRISA},
  file = {theses/JeanMarieMottu.pdf:theses/JeanMarieMottu.pdf:PDF},
  hal_id = {tel-00514506},
  keywords = {IDM;MOA;Oracle;test;transformation;mottu},
  language = {Fran{\c c}ais},
  pdf = {http://tel.archives-ouvertes.fr/tel-00514506/PDF/Mottu08c.pdf},
  url = {http://tel.archives-ouvertes.fr/tel-00514506}
}

@ARTICLE{parbery,
  author = {Ian Parberry},
  title = {A Guide for New Referees in Theoretical Computer Science},
  year = {1989},
  file = {parbery-referee.pdf:parbery-referee.pdf:PDF},
  owner = {jcb},
  timestamp = {2012.07.09}
}

@INPROCEEDINGS{p71-jones,
  author = {Peyton Jones, Simon L. and Wadler, Philip},
  title = {Imperative functional programming},
  booktitle = {Proceedings of the 20th ACM SIGPLAN-SIGACT symposium on Principles
	of programming languages},
  year = {1993},
  series = {POPL '93},
  pages = {71--84},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {We present a new model, based on monads, for performing input/output
	in a non-strict, purely functional language. It is composable, extensible,
	efficient, requires no extensions to the type system, and extends
	smoothly to incorporate mixed-language working and in-place array
	updates.},
  acmid = {158524},
  doi = {http://doi.acm.org/10.1145/158511.158524},
  file = {p71-jones_ImperativeFunctionalProgramming.pdf:p71-jones_ImperativeFunctionalProgramming.pdf:PDF},
  isbn = {0-89791-560-7},
  location = {Charleston, South Carolina, United States},
  numpages = {14},
  url = {http://doi.acm.org/10.1145/158511.158524}
}

@INCOLLECTION{Renggli2010,
  author = {Renggli, Lukas and Denker, Marcus and Nierstrasz, Oscar},
  title = {Language Boxes},
  booktitle = {Software Language Engineering},
  publisher = {Springer Berlin / Heidelberg},
  year = {2010},
  editor = {van den Brand, Mark and Ga-B�evic, Dragan and Gray, Jeff},
  volume = {5969},
  series = {Lecture Notes in Computer Science},
  pages = {274-293},
  note = {10.1007/978-3-642-12107-4_20},
  affiliation = {Software Composition Group, University of Bern, Switzerland},
  file = {Renggli2010_LanguageBoxes\:BendingtheHostLanguagewithModularLanguageChanges.pdf:Renggli2010_LanguageBoxes\:BendingtheHostLanguagewithModularLanguageChanges.pdf:PDF},
  isbn = {978-3-642-12106-7},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-12107-4_20}
}

@INCOLLECTION{Rivera2008,
  author = {Rivera, José and Vallecillo, Antonio},
  title = {Representing and Operating with Model Differences},
  booktitle = {Objects, Components, Models and Patterns},
  publisher = {Springer Berlin Heidelberg},
  year = {2008},
  editor = {Paige, RichardF. and Meyer, Bertrand},
  volume = {11},
  series = {Lecture Notes in Business Information Processing},
  pages = {141-160},
  doi = {10.1007/978-3-540-69824-1_9},
  isbn = {978-3-540-69823-4},
  keywords = {Model-driven software development; model difference; model comparison;
	model evolution; Maude; object matching},
  url = {http://dx.doi.org/10.1007/978-3-540-69824-1_9}
}

@ARTICLE{Romero2007,
  author = {Jos{\'e} Ra{\'u}l Romero and Jos{\'e} Eduardo Rivera and Francisco
	Dur{\'a}n and Antonio Vallecillo},
  title = {Formal and Tool Support for Model Driven Engineering with Maude},
  journal = {Journal of Object Technology},
  year = {2007},
  volume = {6},
  pages = {187-207},
  number = {9},
  ee = {http://dx.doi.org/10.5381/jot.2007.6.9.a10},
  file = {Romero2007_FormalandToolSupportforModelDrivenEngineeringwithMaude.pdf:Romero2007_FormalandToolSupportforModelDrivenEngineeringwithMaude.pdf:PDF}
}

@ARTICLE{review-writing,
  author = {Timothy Roscoe},
  title = {Writing reviews for systems conferences},
  year = {2007},
  file = {review-writing.pdf:review-writing.pdf:PDF},
  owner = {jcb},
  timestamp = {2012.07.09}
}

@ARTICLE{Rusu2011,
  author = {Vlad Rusu},
  title = {Embedding domain-specific modelling languages in maude specifications},
  journal = {ACM SIGSOFT Software Engineering Notes},
  year = {2011},
  volume = {36},
  pages = {1-8},
  number = {1},
  ee = {http://doi.acm.org/10.1145/1921532.1921557},
  file = {Rusu2011_EmbeddingDSMLinMaudeSpecifications.pdf:Rusu2011_EmbeddingDSMLinMaudeSpecifications.pdf:PDF}
}

@INCOLLECTION{Schaetz2009,
  author = {Schätz, Bernhard},
  title = {Formalization and Rule-Based Transformation of EMF Ecore-Based Models},
  booktitle = {Software Language Engineering},
  publisher = {Springer Berlin / Heidelberg},
  year = {2009},
  editor = {Ga-A�evic, Dragan and Lämmel, Ralf and Van Wyk, Eric},
  volume = {5452},
  series = {Lecture Notes in Computer Science},
  pages = {227-244},
  note = {10.1007/978-3-642-00434-6_15},
  abstract = {With models becoming a common-place in software and systems development,
	the support of automatic transformations of those models is an important
	asset to increase the efficiency and improve the quality of the development
	process. However, the definition of transformations still is quite
	complex. Several approaches %G–%@ from more imperative to more
	declarative styles %G–%@ have been introduced to support the definition
	of such transformations. Here, we show how a completely declarative
	relational style based on the interpretation of a model as single
	structured term can be used to provide a transformation mechanism
	allowing a simple, precise, and modular specification of transformations
	for the EMF Ecore platform, using a Prolog rule-based mechanism.},
  affiliation = {Technische Universität München Institut für Informatik Boltzmannstr.�3
	85748 Garching Germany},
  file = {Schaetz2009_FormalizatinoandRuleBasedTransformationEMFEcoreBasedModels.pdf:Schaetz2009_FormalizatinoandRuleBasedTransformationEMFEcoreBasedModels.pdf:PDF},
  isbn = {978-3-642-00433-9},
  keyword = {Computer Science},
  url = {http://dx.doi.org/10.1007/978-3-642-00434-6_15}
}

@ARTICLE{Scott2010,
  author = {Elizabeth Scott and Adrian Johnstone},
  title = {GLL Parsing},
  journal = {Electronic Notes in Theoretical Computer Science},
  year = {2010},
  volume = {253},
  pages = {177 - 189},
  number = {7},
  note = {Proceedings of the Ninth Workshop on Language Descriptions
	Tools and Applications (LDTA 2009)},
  abstract = {Recursive Descent (RD) parsers are popular because their control flow
	follows the structure of the grammar and hence they are easy to write
	and to debug. However, the class of grammars which admit RD parsers
	is very limited. Backtracking techniques may be used to extend this
	class, but can have explosive runtimes and cannot deal with grammars
	with left recursion. Tomita-style RNGLR parsers are fully general
	but are based on LR techniques and do not have the direct relationship
	with the grammar that an RD parser has. We develop the fully general
	GLL parsing technique which is recursive descent-like, and has the
	property that the parse follows closely the structure of the grammar
	rules, but uses RNGLR-like machinery to handle non-determinism. The
	resulting recognisers run in worst-case cubic time and can be built
	even for left recursive grammars.},
  doi = {10.1016/j.entcs.2010.08.041},
  file = {Scott2010_gll.pdf:Scott2010_gll.pdf:PDF},
  issn = {1571-0661},
  keywords = {generalised parsing},
  url = {http://www.sciencedirect.com/science/article/pii/S1571066110001209}
}

@ARTICLE{Seidewitz2003,
  author = {Seidewitz, E.},
  title = {What models mean},
  journal = {Software, IEEE},
  year = {2003},
  volume = {20},
  pages = { 26 - 32},
  number = {5},
  month = {sept.-oct.},
  abstract = { Models must be more than informal pictures. By carefully considering
	a model's relationship to the thing being modeled and to other models
	derivable from it, we can understand how to use models to reason
	about the systems we build and how to use metamodels to specify languages
	for expressing models.},
  doi = {10.1109/MS.2003.1231147},
  file = {Seidewitz2003_WhatModelsMean.pdf:Seidewitz2003_WhatModelsMean.pdf:PDF},
  issn = {0740-7459},
  keywords = { formal specification; object-oriented programming; specification
	languages; UML model; metamodels; model-driven approach; modeling
	language; modeling languages; semantics; software modeling; specifications;}
}

@ARTICLE{Sendall2003,
  author = {Sendall, S. and Kozaczynski, W.},
  title = {Model transformation: the heart and soul of model-driven software
	development},
  journal = {Software, IEEE},
  year = {2003},
  volume = {20},
  pages = { 42 - 45},
  number = {5},
  month = {sept.-oct.},
  abstract = { The model-driven approach can increase development productivity and
	quality by describing important aspects of a solution with human-friendly
	abstractions and by generating common application fragments with
	templates. This article examines different approaches to model transformations
	and recommends desirable language characteristics for describing
	them.},
  doi = {10.1109/MS.2003.1231150},
  file = {Sendall2003-01231150.pdf:Sendall2003-01231150.pdf:PDF},
  issn = {0740-7459},
  keywords = { common application fragments; development productivity; human-friendly
	abstractions; language characteristics; model-driven approach; quality;
	templates; object-oriented programming; software reusability; specification
	languages;}
}

@ARTICLE{55470,
  author = {Smith, A.J.},
  title = {The task of the referee},
  journal = {Computer},
  year = {1990},
  volume = {23},
  pages = {65 -71},
  number = {4},
  month = {april },
  abstract = {Computer researchers have a professional obligation to referee the
	work of others. This article tells you how to evaluate a paper and
	write a report using common standards and procedures. It focuses
	on research papers in applied areas of computer science and engineering,
	such as systems architecture, hardware, communications, and performance
	evaluation, but most of the discussion is generally applicable; separate
	sections consider research proposals and survey and tutorial papers.<>},
  doi = {10.1109/2.55470},
  issn = {0018-9162},
  keywords = {common standards;computer researchers;computer science;peer review;professional
	obligation;referee;report writing;research paper evaluation;research
	proposals;survey papers;tutorial papers;computer science;technical
	presentation;}
}

@BOOK{emf09,
  title = {EMF: Eclipse Modeling Framework 2.0},
  publisher = {Addison-Wesley Professional},
  year = {2009},
  author = {Steinberg, David and Budinsky, Frank and Paternostro, Marcelo and
	Merks, Ed},
  edition = {2nd},
  date-added = {2011-05-18 22:59:36 +0200},
  date-modified = {2011-05-18 23:00:46 +0200},
  isbn = {0321331885},
  keywords = {emf, modeling},
  url = {http://www.eclipse.org/modeling/emf/} 
}

@ARTICLE{Taentzer10,
  author = {Gabriele Taentzer},
  title = {What Algebraic Graph Transformations Can Do For Model Transformations},
  journal = {ECEASST},
  year = {2010},
  volume = {30},
  pages = {1-10},
  abstract = {Model transformations are key activities in model-driven development
	(MDD). A number of model transformation approaches have emerged for
	different purposes and with different backgrounds.
	
	This paper focusses on the use of algebraic graph transformation concepts
	to specify and verify model transformations in MDD.},
  ee = {http://journal.ub.tu-berlin.de/index.php/eceasst/article/view/438},
  file = {Taentzer10-ECEASST.pdf:Taentzer10-ECEASST.pdf:PDF},
  url = {http://journal.ub.tu-berlin.de/eceasst/article/view/438}
}

@ARTICLE{Varro2007,
  author = {Dániel Varró and András Balogh},
  title = {The model transformation language of the {VIATRA2} framework},
  journal = {Science of Computer Programming},
  year = {2007},
  volume = {68},
  pages = {214 - 234},
  number = {3},
  note = {Special Issue on Model Transformation},
  abstract = {We present the model transformation language of the VIATRA2 framework,
	which provides a rule- and pattern-based transformation language
	for manipulating graph models by combining graph transformation and
	abstract state machines into a single specification paradigm. This
	language offers advanced constructs for querying (e.g. recursive
	graph patterns) and manipulating models (e.g. generic transformation
	and meta-transformation rules) in unidirectional model transformations
	frequently used in formal model analysis to carry out powerful abstractions.},
  doi = {10.1016/j.scico.2007.05.004},
  file = {Varro2007_theModelTransformationLanguageoftheVIATRA2Framework.pdf:Varro2007_theModelTransformationLanguageoftheVIATRA2Framework.pdf:PDF},
  issn = {0167-6423},
  keywords = {Model transformation},
  url = {http://www.sciencedirect.com/science/article/pii/S016764230700127X}
}

@MISC{Welsh2000,
  author = {Matt Welsh},
  title = {The Staged Event-Driven Architecture for Highly-Concurrent Server
	Applications},
  year = {2000}
}

@ARTICLE{Zschaler2010,
  author = {Zschaler, Steffen},
  title = {Formal specification of non-functional properties of component-based
	software systems},
  journal = {Software and Systems Modeling},
  year = {2010},
  volume = {9},
  pages = {161-201},
  note = {10.1007/s10270-009-0115-6},
  abstract = {Component-based software engineering (CBSE) is viewed as an opportunity
	to deal with the increasing complexity of modern-day software. Along
	with CBSE comes the notion of component markets, where more or less
	generic pieces of software are traded, to be combined into applications
	by third-party application developers. For such a component market
	to work successfully, all relevant properties of components must
	be precisely and formally described. This is especially true for
	non-functional properties, such as performance, memory foot print,
	or security. While the specification of functional properties is
	well understood, non-functional properties are only beginning to
	become a research focus. This paper discusses semantic concepts for
	the specification of non-functional properties, taking into account
	the specific needs of a component market. Based on these semantic
	concepts, we present a new specification language QML/CS that can
	be used to model non-functional product properties of components
	and component-based software systems.},
  affiliation = {Lancaster University Computing Department Lancaster UK},
  file = {Zschaler2010_.FormalSpecificationofNFPofcomponent-basedSoftwareSystems.pdf:Zschaler2010_.FormalSpecificationofNFPofcomponent-basedSoftwareSystems.pdf:PDF},
  issn = {1619-1366},
  issue = {2},
  keyword = {Computer Science},
  publisher = {Springer Berlin / Heidelberg},
  url = {http://dx.doi.org/10.1007/s10270-009-0115-6}
}

@ARTICLE{Serbanuta2009,
  author = {Traian Florin Şerbănuţă and Grigore Roşu and José Meseguer},
  title = {A rewriting logic approach to operational semantics},
  journal = {Information and Computation},
  year = {2009},
  volume = {207},
  pages = {305 - 340},
  number = {2},
  note = {Special issue on Structural Operational Semantics (SOS)},
  abstract = {This paper shows how rewriting logic semantics (RLS) can be used as
	a computational logic framework for operational semantic definitions
	of programming languages. Several operational semantics styles are
	addressed: big-step and small-step structural operational semantics
	(SOS), modular SOS, reduction semantics with evaluation contexts,
	continuation-based semantics, and the chemical abstract machine.
	Each of these language definitional styles can be faithfully captured
	as an RLS theory, in the sense that there is a one-to-one correspondence
	between computational steps in the original language definition and
	computational steps in the corresponding RLS theory. A major goal
	of this paper is to show that RLS does not force or pre-impose any
	given language definitional style, and that its flexibility and ease
	of use makes RLS an appealing framework for exploring new definitional
	styles.},
  doi = {10.1016/j.ic.2008.03.026},
  file = {Serbanuta2009-ARewritingLogicApproachToOperationalSemantics.pdf:Serbanuta2009-ARewritingLogicApproachToOperationalSemantics.pdf:PDF},
  issn = {0890-5401},
  keywords = {Operational semantics},
  url = {http://www.sciencedirect.com/science/article/pii/S0890540108001302}
}

@PROCEEDINGS{WRLA2010,
  title = {Rewriting Logic and Its Applications - 8th International Workshop,
	WRLA 2010, Held as a Satellite Event of ETAPS 2010, Paphos, Cyprus,
	March 20-21, 2010, Revised Selected Papers},
  year = {2010},
  editor = {Peter Csaba {\"O}lveczky},
  volume = {6381},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {WRLA},
  ee = {http://dx.doi.org/10.1007/978-3-642-16310-4},
  isbn = {978-3-642-16309-8}
}

@PROCEEDINGS{Olveczky:2010:1927806,
  title = {WRLA'10: Proceedings of the 8th international conference on Rewriting
	logic and its applications},
  year = {2010},
  editor = {\"{O}lveczky, Peter Csaba},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  isbn = {3-642-16309-2, 978-3-642-16309-8},
  issn = {0302-9743},
  location = {Paphos, Cyprus}
}

@PROCEEDINGS{DBLP:conf/uml/2005,
  title = {Model Driven Engineering Languages and Systems, 8th International
	Conference, MoDELS 2005, Montego Bay, Jamaica, October 2-7, 2005,
	Proceedings},
  year = {2005},
  editor = {Lionel C. Briand and Clay Williams},
  volume = {3713},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {MoDELS},
  isbn = {3-540-29010-9}
}

@PROCEEDINGS{DBLP:conf/uml/2005se,
  title = {Satellite Events at the MoDELS 2005 Conference, MoDELS 2005 International
	Workshops, Doctoral Symposium, Educators Symposium, Montego Bay,
	Jamaica, October 2-7, 2005, Revised Selected Papers},
  year = {2006},
  editor = {Jean-Michel Bruel},
  volume = {3844},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {MoDELS Satellite Events},
  isbn = {3-540-31780-5}
}

@PROCEEDINGS{DBLP:conf/oopsla/2010,
  title = {Proceedings of the 25th Annual ACM SIGPLAN Conference on Object-Oriented
	Programming, Systems, Languages, and Applications, OOPSLA 2010, October
	17-21, 2010, Reno/Tahoe, Nevada, USA},
  year = {2010},
  editor = {William R. Cook and Siobh{\'a}n Clarke and Martin C. Rinard},
  publisher = {ACM},
  booktitle = {OOPSLA},
  isbn = {978-1-4503-0203-6}
}

@PROCEEDINGS{DBLP:conf/models/2008,
  title = {Model Driven Engineering Languages and Systems, 11th International
	Conference, MoDELS 2008, Toulouse, France, September 28 - October
	3, 2008. Proceedings},
  year = {2008},
  editor = {Krzysztof Czarnecki and Ileana Ober and Jean-Michel Bruel and Axel
	Uhl and Markus V{\"o}lter},
  volume = {5301},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {MoDELS},
  isbn = {978-3-540-87874-2}
}

@PROCEEDINGS{DBLP:conf/gg/2008,
  title = {Graph Transformations, 4th International Conference, ICGT 2008, Leicester,
	United Kingdom, September 7-13, 2008. Proceedings},
  year = {2008},
  editor = {Hartmut Ehrig and Reiko Heckel and Grzegorz Rozenberg and Gabriele
	Taentzer},
  volume = {5214},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {ICGT},
  isbn = {978-3-540-87404-1}
}

@PROCEEDINGS{Jardim-Gonccalves2007,
  title = {Enterprise Interoperability II - New Challenges and Industrial Approaches,
	Proceedings of the 3th International Conference on Interoperability
	for Enterprise Software and Applications, IESA 2007, March 27-30,
	2007, Funchal, Madeira Island, Portugal},
  year = {2007},
  editor = {Ricardo Jardim-Gon\c{c}alves and J{\"o}rg P. M{\"u}ller and Kai Mertins
	and Martin Zelm},
  publisher = {Springer},
  booktitle = {IESA},
  ee = {http://dx.doi.org/10.1007/978-1-84628-858-6},
  isbn = {978-1-84628-857-9}
}

@PROCEEDINGS{DBLP:journals/corr/abs-1012-5337,
  title = {Proceedings International Workshop on Strategies in Rewriting, Proving,
	and Programming},
  year = {2010},
  editor = {H{\'e}l{\`e}ne Kirchner and C{\'e}sar Mu{\~n}oz},
  volume = {44},
  series = {EPTCS},
  booktitle = {IWS},
  ee = {http://dx.doi.org/10.4204/EPTCS.44}
}

@PROCEEDINGS{DBLP:conf/sas/2009,
  title = {Static Analysis, 16th International Symposium, SAS 2009, Los Angeles,
	CA, USA, August 9-11, 2009. Proceedings},
  year = {2009},
  editor = {Jens Palsberg and Zhendong Su},
  volume = {5673},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {SAS},
  ee = {http://dx.doi.org/10.1007/978-3-642-03237-0},
  isbn = {978-3-642-03236-3}
}

@PROCEEDINGS{DBLP:conf/models/2010-1,
  title = {Model Driven Engineering Languages and Systems - 13th International
	Conference, MODELS 2010, Oslo, Norway, October 3-8, 2010, Proceedings,
	Part I},
  year = {2010},
  editor = {Dorina C. Petriu and Nicolas Rouquette and {\O}ystein Haugen},
  volume = {6394},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {MoDELS (1)},
  ee = {http://dx.doi.org/10.1007/978-3-642-16145-2},
  isbn = {978-3-642-16144-5}
}

@PROCEEDINGS{Sloane:2012:2427048,
  title = {LDTA '12: Proceedings of the Twelfth Workshop on Language Descriptions,
	Tools, and Applications},
  year = {2012},
  editor = {Sloane, Anthony and Andova, Suzana},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {This volume contains the papers presented at the Twelfth Workshop
	on Language Descriptions, Tools, and Applications (LDTA 2012). LDTA
	2012 is a satellite event of the European Joint Conferences on Theory
	and Practice of Software (ETAPS 2012) and was being held in Tallinn,
	Estonia, on March 31 and April 1, 2012. Previous instances of this
	workshop have been held as satellite events of ETAPS in Saarbrücken,
	Germany (2011), Paphos, Cyprus (2010), York, UK (2009), Budapest,
	Hungary (2008), Braga, Portugal (2007), Vienna, Austria (2006), Edinburgh,
	UK (2005), Barcelona, Spain (2004),Warsaw, Poland (2003), Grenoble,
	France (2002), and Genoa, Italy (2001).},
  isbn = {978-1-4503-1536-4},
  location = {Tallinn, Estonia}
}

@PROCEEDINGS{DBLP:conf/scam/2009,
  title = {Ninth IEEE International Working Conference on Source Code Analysis
	and Manipulation, SCAM 2009, Edmonton, Alberta, Canada, September
	20-21, 2009},
  year = {2009},
  publisher = {IEEE Computer Society},
  booktitle = {SCAM},
  isbn = {978-0-7695-3793-1}
}

@MANUAL{omgqvt1,
  title = {Meta Object Facility (MOF) 2.0 Query/View/Transformation (QVT) Specification,
	version 1.0},
  organization = {Object Management Group, Inc.},
  month = apr,
  year = {2008},
  file = {omgqvt1.pdf:omgqvt1.pdf:PDF},
  key = {OMG},
  url = {http://www.omg.org/spec/QVT/1.0/PDF/}
}
@MANUAL{omgqvt11,
  title = {Meta Object Facility (MOF) 2.0 Query/View/Transformation (QVT) Specification,
	version 1.1},
  organization = {Object Management Group, Inc.},
  month = {January},
  year = {2011},
  key = {OMG},
  url = {http://www.omg.org/spec/QVT/1.0/PDF/}
}

@PROCEEDINGS{DBLP:conf/iceccs/2005,
  title = {10th International Conference on Engineering of Complex Computer
	Systems (ICECCS 2005), 16-20 June 2005, Shanghai, China},
  year = {2005},
  publisher = {IEEE Computer Society},
  booktitle = {ICECCS},
  isbn = {0-7695-2284-X}
}

@PROCEEDINGS{DBLP:conf/tools/39-2001,
  title = {TOOLS USA 2001: Software Technologies for the Age of the Internet,
	39th International Conference {\&} Exhibition, Santa Barbara, CA,
	USA, July 29 - August 3, 2001},
  year = {2001},
  publisher = {IEEE Computer Society},
  booktitle = {TOOLS (39)},
  isbn = {0-7695-1251-8}
}

@ARTICLE{Reilles2007,
  author = {Antoine Reilles},
  title = {Canonical Abstract Syntax Trees},
  journal = {Electronic Notes in Theoretical Computer Science},
  year = {2007},
  volume = {176},
  pages = {165 - 179},
  number = {4},
  note = {Proceedings of the 6th International Workshop on Rewriting
	Logic and its Applications (WRLA 2006)},
  abstract = {This paper presents GOM, a language for describing abstract syntax
	trees and generating a Java implementation for those trees. GOM includes
	features allowing the user to specify and modify the interface of
	the data structure. These features provide in particular the capability
	to maintain the internal representation of data in canonical form
	with respect to a rewrite system. This explicitly guarantees that
	the client program only manipulates normal forms for this rewrite
	system, a feature which is only implicitly used in many implementations.},
  doi = {10.1016/j.entcs.2007.06.014},
  issn = {1571-0661},
  keywords = {syntax trees},
  url = {http://www.sciencedirect.com/science/article/pii/S1571066107005191}
}
@ARTICLE{Borovansky1998,
  author = {Peter Borovansk{\'y} and Claude Kirchner and H{\'e}l{\`e}ne Kirchner
	and Pierre-Etienne Moreau and Christophe Ringeissen},
  title = {An overview of ELAN},
  journal = {Electr. Notes Theor. Comput. Sci.},
  year = {1998},
  volume = {15},
  pages = {55-70},
  ee = {http://dx.doi.org/10.1016/S1571-0661(05)82552-6}
}

@INPROCEEDINGS{Visser1998,
  author = {Eelco Visser and Zine-El-Abidine Benaissa and Andrew P. Tolmach},
  title = {Building Program Optimizers with Rewriting Strategies},
  booktitle = {ICFP},
  year = {1998},
  pages = {13-26},
  crossref = {icfp98},
  ee = {http://doi.acm.org/10.1145/289423.289425}
}
@PROCEEDINGS{icfp98,
  editor    = {Matthias Felleisen and
               Paul Hudak and
               Christian Queinnec},
  title     = {Proceedings of the third ACM SIGPLAN International Conference
               on Functional Programming (ICFP '98), Baltimore, Maryland,
               USA, September 27-29, 1998},
  booktitle = {ICFP},
  publisher = {ACM},
  year      = {1998},
  isbn      = {0-58113-024-4},
}
@INPROCEEDINGS{Visser2001,
  author = {Joost Visser},
  title = {Visitor Combination and Traversal Control},
  booktitle = {OOPSLA},
  year = {2001},
  pages = {270-282},
  crossref = {oopsla2001},
  ee = {http://doi.acm.org/10.1145/504282.504302}
}
@proceedings{oopsla2001,
  editor    = {Linda M. Northrop and
               John M. Vlissides},
  title     = {Proceedings of the 2001 ACM SIGPLAN Conference on Object-Oriented
               Programming Systems, Languages and Applications, OOPSLA
               2001, Tampa, Florida, USA, October 14-18, 2001},
  booktitle = {OOPSLA},
  publisher = {ACM},
  year      = {2001},
  isbn      = {1-58113-355-9},
  ee        = {http://dl.acm.org/citation.cfm?id=504282}
}
@MANUAL{omgmof,
  key = {{MOF}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Meta Object Facility (MOF) Core Specification Version 2.0}},
  url = {http://www.omg.org/cgi-bin/doc?formal/2006-01-01},
  month = {May},
  year = {2006}
}
@MANUAL{mof241,
  key = {{MOF}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Meta Object Facility (MOF) Core Specification Version 2.4.1}},
  month = {June},
  year = {2013}
}
%MANUAL{emof,
%  key = {{EMOF}},
%  author = {{OMG}},
%  organization = {Object Management Group, Inc.},
%  publisher = {Object Management Group},
%  series = {OMG Available Specification},
%  title = {{The Essential MOF (EMOF) Model}},
%  month = {May},
%  year = {2006}
%}
%MANUAL{cmof,
%  key = {{CMOF}},
%  author = {{OMG}},
%  organization = {Object Management Group, Inc.},
%  publisher = {Object Management Group},
%  series = {OMG Available Specification},
%  title = {{The Complete MOF (CMOF) Model}},
%  month = {May},
%  year = {2006}
%}
@MANUAL{omgocl2,
  key = {{OCL}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Object Constraint Language Specification (OCL) 2.0 Specification}},
  url = {http://www.omg.org/cgi-bin/doc?formal/2006-05-01},
  month = {May},
  year = {2006}
}
@MANUAL{ocl231,
  key = {{OCL}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Object Constraint Language, Version 2.3.1}},
  url = {http://www.omg.org/spec/OCL/2.3.1/},
  month = {January},
  year = {2012}
}
@MANUAL{xslt,
  key = {{XSLT}},
  author = {{W3C}},
  title = {{XSL Transformations (XSLT) Version 1.0}},
  year = {1999},
  month = {November},
  url = {http://www.w3.org/TR/xslt}
}
@MANUAL{xquery,
  title = {{XQuery 1.0: An XML Query Language (Second Edition)}},
  organization = {{W3C}},
  year = 2010,
  author = {Boag, Scott and Chamberlin, Don and Fernández, Mary F. and Florescu, Daniela and Robie, Jonathan and Siméon, Jérôme},
  month = {December},
  url = {http://www.w3.org/TR/xquery/},
  key = {{XQuery}}
}
@MANUAL{xqueryuf,
  title = {{XQuery Update Facility 1.0}},
  year = 2011,
  organization = {{W3C}},
  author = {Robie, Jonathan and Chamberlin, Don and Dyck, Michael and Florescu,
	Daniela and Melton, Jim and Sim{\'e}on, J},
  month = {March},
  url = {http://www.w3.org/TR/xqupdate/},
  journal = {W3C Rec.},
  key = {{XQueryUF}}
}
@MANUAL{uml2,
  key = {{UML}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Unified Modeling Language (UML), v2.2}},
  url = {http://www.omg.org/spec/UML/2.2/},
  month = {February},
  year = {2009}
}
@MANUAL{uml241,
  key = {{UML}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Unified Modeling Language (UML), v2.4.1}},
  url = {http://www.omg.org/spec/UML/2.4.1/},
  month = {August},
  year = {2011}
}
@MANUAL{omgxmi,
  key = {{XMI}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{MOF/XMI Mapping 2.4.1}},
  url = {http://www.omg.org/spec/XMI/2.4.1/},
  month = {June},
  year = {2013}
}
@MANUAL{omgspem,
  key = {{SPEM}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Software \& Systems Process Engineering Metamodel specification (SPEM) Version 2.0}},
  url = {http://www.omg.org/spec/SPEM/2.0/},
  month = {April},
  year = {2008}
}
@MANUAL{sysml1.3,
  key = {{SysML}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Systems Modeling Language (SysML), Version 1.3}},
  url = {http://www.omg.org/spec/SysML/1.3/},
  month = {June},
  year = {2012}
}
@MANUAL{cwm,
  key = {{CWM}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Common Warehouse Metamodel, v1.1}},
  url = {http://www.omg.org/spec/CWM/1.1/},
  month = {March},
  year = {2003}
}
%STANDARD{,
%MISC{,
@MANUAL{omgdi,
  key = {{DI}},
  author = {{OMG}},
  organization = {Object Management Group, Inc.},
  publisher = {Object Management Group},
  series = {OMG Available Specification},
  title = {{Diagram Interchange 2.0}},
  url = {http://www.omg.org/cgi-bin/doc?ptc/2003-09-01},
  month = {September},
  year = {2003}
}

@PHDTHESIS{burel09,
  author = {Guillaume Burel},
  title = {Bonnes d{\'e}monstrations en d{\'e}duction modulo},
  school = {Universit{\'e} Henri Poincar{\'e} (Nancy 1)},
  year = {2009},
  keywords = {deduction modulo, logic}
}

@INPROCEEDINGS{bonichon04,
  author = {Richard Bonichon},
  title = {TaMeD: A Tableau Method for Deduction Modulo},
  booktitle = {IJCAR},
  year = {2004},
  pages = {445-459},
  ee = {{http://dx.doi.org/10.1007/978-3-540-25984-8_33}},
  keywords = {deduction modulo, logic}
}

@PHDTHESIS{brauner10,
  author = {{B}rauner, {P}aul},
  title = {Fondements et mise en {\oe}uvre de la Super D{\'e}duction Modulo},
  school = {{U}niversit{\'e} {H}enri {P}oincar{\'e} - {N}ancy {I}},
  year = {2010},
  month = {06},
  keywords = {tom; super d{\'e}duction}
}
@PROCEEDINGS{ecmdafa2006,
  title = {Model Driven Architecture - Foundations and Applications, Second
	European Conference, ECMDA-FA 2006, Bilbao, Spain, July 10-13, 2006,
	Proceedings},
  year = {2006},
  editor = {Arend Rensink and Jos Warmer},
  volume = {4066},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer},
  booktitle = {ECMDA-FA},
  isbn = {3-540-35909-5}
}
@proceedings{jisbd2009,
  editor    = {Antonio Vallecillo and
               Goiuria Sagardui},
  title     = {XIV Jornadas de Ingenier\'{\i}a del Software y Bases de
               Datos (JISBD 2009), San Sebasti{\'a}n, Spain, September
               8-11, 2009},
  booktitle = {JISBD},
  year      = {2009},
  isbn      = {978-84-692-4211-7}
}
@ARTICLE{Varro2002,
  author = {Dániel Varró and Gergely Varró and András Pataricza},
  title = {Designing the automatic transformation of visual languages},
  journal = {Science of Computer Programming},
  year = {2002},
  volume = {44},
  pages = {205 - 227},
  number = {2},
  doi = {10.1016/S0167-6423(02)00039-4}
}
@proceedings{icmt2008,
  editor    = {Antonio Vallecillo and
               Jeff Gray and
               Alfonso Pierantonio},
  title     = {Theory and Practice of Model Transformations, First International
               Conference, ICMT 2008, Z{\"u}rich, Switzerland, July 1-2,
               2008, Proceedings},
  booktitle = {ICMT},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {5063},
  year      = {2008},
  isbn      = {978-3-540-69926-2}
}
@MISC{Vanhooff,
  author = {Bert Vanhooff and Stefan Van Baelen and Wouter Joosen and E Berbers},
  title = {Traceability as Input for Model Transformations},
  abstract = {Some model transformations require more information than can be derived
	from its source model(s) in order to generate a meaningful target
	model. For example, a transformation with two source models needs
	to know how their respective model elements relate; these relations
	often only exist implicitly as part of the transformations developer’s
	knowledge. In this paper we show that traceability models, who can
	be automatically generated as part of any model transformation, contain
	explicit inter- and intra-model relations that are valuable to subsequent
	transformations. We explain how to extract this information and propose
	a number of additions to current transformation techniques that are
	needed to completely open up traceability information to transformation
	developers.},
  file = {Vanhooff_TraceabilityasInputforModelTranformations.pdf:Vanhooff_TraceabilityasInputforModelTranformations.pdf:PDF}
}

@BOOK{Fow99,
 author = {Martin Fowler},
 title = {Refactoring: Improving the Design of Existing Code},
 year = {1999},
 isbn = {0-201-48567-2},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA}
} 

@ARTICLE{Bezivin2005a,
  author = {Bézivin, Jean},
  title = {On the unification power of models},
  journal = {Software \& Systems Modeling},
  year = {2005},
  volume = {4},
  pages = {171-188},
  number = {2},
  doi = {10.1007/s10270-005-0079-0},
  issn = {1619-1366},
  keywords = {MDE; MDA; Models; Metamodels},
  language = {English},
  publisher = {Springer-Verlag},
  url = {http://dx.doi.org/10.1007/s10270-005-0079-0}
}


@ARTICLE{Bezivin2004,
  author = {Jean Bézivin and Jean-Pierre Briot},
  title = {Sur les principes de base de l'ingénierie des modèles},
  journal = {L' Objet (Paris)},
  year = {2004},
  volume = {10},
  pages = {147--157},
  number = {4},
  note = {fre},
  editor = {Lavoisier},
  institution = {Université de Nantes, Equipe ATLAS, (INRIA \& LIMA), 2, Rue de la
	Houssinière, BP 92208, FRA; CNRS-LIP6, FRA},
  issn = {1262-1137},
  keywords = {Automatic programming; Model driven architecture; Modeling; Systems
	engineering; Object constraint language; Software architecture; Engineering
	information systems; Software engineering; Unified modelling language;
	Object oriented; Metadata; Electronic data interchange; Software
	development; Domain specific language},
  url = {http://www.refdoc.fr/Detailnotice?idarticle=8429537}
}

% (Trait{\'e} IC2, s{\'e}rie Informatique et Syst{\`e}mes d'Information)},
@book{Favre2006,
  author = {Favre, Jean-Marie and Estublier, Jacky and Blay-Fornarino, Mireille},
  title = {L'ing{\'e}nierie dirig{\'e}e par les mod{\`e}les : au-del{\`a} du
    {MDA}},
  series = {Informatique et Systèmes d'Information},
  publisher = {Hermes Science},
  editor = {Lavoisier},
  month = {February},
  year = {2006}
}

@BOOK{Blanc2005,
  title = {MDA en action : Ing{\'e}nierie logicielle guid{\'e}e par les mod{\`e}les},
  publisher = {Editions Eyrolles},
  year = {2005},
  author = {Blanc, Xavier and Salvatori, Olivier}
}

@MISC{mda,
  author = {Richard Soley and the OMG Staff},
  title = {{Model Driven Architecture}},
  howpublished = {white paper},
  month = {Nov},
  year = {2000},
  keywords = {MDA}
}

@ARTICLE{Atkinson2003,
  author = {Atkinson, C. and Kuhne, T.},
  title = {Model-driven development: a metamodeling foundation},
  journal = {Software, IEEE},
  year = {2003},
  volume = {20},
  pages = {36-41},
  number = {5},
  month = {Sept},
  abstract = {Metamodeling is an essential foundation for MDD, but there's little
	consensus on the precise form it should take and role it should play.
	The authors analyze the underlying motivation for MDD and then derive
	a concrete set of requirements that a supporting infrastructure should
	satisfy. They discuss why the traditional "language definition" interpretation
	of metamodeling isn't a sufficient foundation and explain how it
	can be extended to unlock MDD's full potential.},
  doi = {10.1109/MS.2003.1231149},
  issn = {0740-7459},
  keywords = {modelling;object-oriented programming;specification languages;language
	definition;metamodeling;model-driven development;supporting infrastructure;Computer
	science;Humans;Investments;Metamodeling;Object oriented modeling;Personnel;Production;Productivity;Program
	processors;Programming profession}
}
@ARTICLE{Booch2004,
    author = {Booch, Grady and Brown, Alan W. and Iyengar, Sridhar and Rumbaugh, James and Selic, Bran},
    journal = {Business Process Trends/MDA Journal},
    keywords = {mda},
    title = {{An MDA Manifesto}},
    month = {May},
    year = {2004}

}

@INPROCEEDINGS{Greenfield2003,
  author = {Greenfield, Jack and Short, Keith},
  title = {Software Factories: Assembling Applications with Patterns, Models,
	Frameworks and Tools},
  booktitle = {Companion of the 18th Annual ACM SIGPLAN Conference on Object-oriented
	Programming, Systems, Languages, and Applications},
  year = {2003},
  series = {OOPSLA '03},
  pages = {16--27},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {949348},
  doi = {10.1145/949344.949348},
  isbn = {1-58113-751-6},
  keywords = {design patterns, domain-specific languages, model-driven development,
	software factories, software product lines},
  location = {Anaheim, CA, USA},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/949344.949348}
}

@MISC{grammarware,
  author = {Jan Korta and Paul Klint and Steven Klusener and Ralf Lämmel and
	ChrisVerhoef and Ernst-Jan Verhoeven},
  title = {{Engineering of Grammarware}},
  url = {http://www.cs.vu.nl/grammarware/}
}

@INPROCEEDINGS{Favre2004,
  author = {Favre, Jean-Marie},
  title = {Towards a basic theory to model model driven engineering},
  booktitle = {3rd Workshop in Software Model Engineering, WiSME},
  year = {2004},
  url = {http://www-adele.imag.fr/~jmfavre}
}

@ARTICLE{Klint2005,
  author = {Klint, Paul and L\"{a}mmel, Ralf and Verhoef, Chris},
  title = {Toward an Engineering Discipline for Grammarware},
  journal = {ACM Trans. Softw. Eng. Methodol.},
  year = {2005},
  volume = {14},
  pages = {331--380},
  number = {3},
  month = jul,
  acmid = {1073000},
  address = {New York, NY, USA},
  doi = {10.1145/1072997.1073000},
  issn = {1049-331X},
  issue_date = {July 2005},
  keywords = {Grammarware, automated software engineering, best practices, generic
	language technology, grammar-dependent software, grammars, language
	processing, metamodeling, model-driven development, parsers, software
	evolution, software transformation},
  numpages = {50},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1072997.1073000}
}

@ARTICLE{Brown2004,
  author = {Brown, Alan W.},
  title = {Model driven architecture: Principles and practice},
  journal = {Software and Systems Modeling},
  year = {2004},
  volume = {3},
  pages = {314-327},
  number = {4},
  doi = {10.1007/s10270-004-0061-2},
  issn = {1619-1366},
  keywords = {Software architecture; Software design; Unified Modeling Language
	(UML)},
  language = {English},
  publisher = {Springer-Verlag},
  url = {http://dx.doi.org/10.1007/s10270-004-0061-2}
}
@BOOK{Mellor2004,
  title = {MDA distilled: principles of model-driven architecture},
  publisher = {Addison-Wesley Professional},
  year = {2004},
  author = {Mellor, Stephen J. and Kendall, Scott and Uhl, Axel and Weise, Dirk}
}

@ARTICLE{Kirchner2008,
  author = {Kirchner, Claude and Kirchner, Florent and Kirchner, H{\'e}l{\`e}ne
	and others},
  title = {Strategic Computation and Deduction},
  journal = {Reasoning in Simple Type Theory. Festchrift in Honour of Peter B.
	Andrews on His 70th Birthday},
  year = {2008},
  volume = {17},
  pages = {339--364}
}

@BOOK{Bezem2003,
  title = {Term rewriting systems},
  publisher = {Cambridge University Press},
  year = {2003},
  author = {Bezem, Marc and Klop, Jan Willem and de Vrijer, Roel}
}

@TECHREPORT{Kirchner1996,
  author = {Claude Kirchner and Hélène Kirchner},
  title = {Rewriting Solving Proving},
  year = {1996},
  abstract = {This is a preliminary version We begin writing this book in the early
	90. By lack of time, we did not really finish it, but since we were
	asked by several colleagues who wanted to use some of its contents,
	we make it available as it is. All comments on any part of this work
	are very welcome.}
}

@PHDTHESIS{Vittek1994,
  author = {Vittek, Marian},
  title = {{ELAN : Un cadre logique pour le prototypage de langages de programmation
	avec contraintes}},
  school = {{U}niversit{\'e} {H}enri {P}oincar{\'e} - {N}ancy {I}},
  year = {1994},
  type = {{Th\`ese de Doctorat d'Universit\'e}},
  month = {octobre},
  keywords = {elan,rewriting,programming language}
}

@INPROCEEDINGS{Borovansky1996,
  author = {Borovansk\'y, Peter and Kirchner, Claude and Kirchner, H\'el\`ene
	and Moreau, Pierre-Etienne and Vittek, Marian},
  title = {{{\sf ELAN}: A logical framework based on computational systems}},
  booktitle = {WRLA'96: Proceedings of the 1st International Workshop on Rewriting
	Logic and its Applications},
  year = {1996},
  editor = {Meseguer, J.},
  volume = {4},
  publisher = entcs 
}
%{Electr. Notes Theor. Comput. Sci.}
@INCOLLECTION{Visser01,
  author = {Visser, Eelco},
  title = {{Stratego: A Language for Program Transformation Based on Rewriting
	Strategies System Description of Stratego 0.5}},
  booktitle = {Rewriting Techniques and Applications},
  publisher = {Springer Berlin Heidelberg},
  year = {2001},
  editor = {Middeldorp, Aart},
  volume = {2051},
  series = {Lecture Notes in Computer Science},
  pages = {357-361},
  doi = {10.1007/3-540-45127-7_27},
  isbn = {978-3-540-42117-7}
}

@ARTICLE{MartiOliet2005,
  author = {Mart{\'\i}-Oliet, Narciso and Meseguer, Jos{\'e} and Verdejo, Alberto},
  title = {Towards a strategy language for Maude},
  journal = {Electronic Notes in Theoretical Computer Science},
  year = {2005},
  volume = {117},
  pages = {417--441},
  publisher = {Elsevier}
}

@INCOLLECTION{Gerber2002,
  author = {Gerber, Anna and Lawley, Michael and Raymond, Kerry and Steel, Jim
	and Wood, Andrew},
  title = {{Transformation: The Missing Link of MDA}},
  booktitle = {Graph Transformation},
  publisher = {Springer Berlin Heidelberg},
  year = {2002},
  editor = {Corradini, Andrea and Ehrig, Hartmut and Kreowski, Hans-Jörg and
	Rozenberg, Grzegorz},
  volume = {2505},
  series = {Lecture Notes in Computer Science},
  pages = {90-105},
  doi = {10.1007/3-540-45832-8_9},
  isbn = {978-3-540-44310-0},
  language = {English},
  url = {http://dx.doi.org/10.1007/3-540-45832-8_9}
}

@INPROCEEDINGS{Brand2001,
  author = {Brand, {M.G.J. van den} and Deursen, {A. van} and J. Heering and
	Jong, {H.A. de} and Jonge, {M. de} and T. Kuipers and P. Klint and
	L. Moonen and P.A. Olivier and J. Scheerder and J.J. Vinju and E.
	Visser and J. Visser},
  title = {The {ASF}+{SDF} {M}eta-{E}nvironment: a {C}omponent-{B}ased {L}anguage
	{D}evelopment {E}nvironment},
  booktitle = {CC'01: Proceedings of the 10th International Conference on Compiler
	Construction},
  year = {2001},
  editor = {Reinhard Wilhelm},
  volume = {2027},
  series = {LNCS},
  pages = {365--370},
  publisher = {Springer-Verlag}
}
@INCOLLECTION{Boronat2010,
  author = {Boronat, Artur and {\"O}lveczky, PeterCsaba},
  title = {Formal Real-Time Model Transformations in MOMENT2},
  booktitle = {Fundamental Approaches to Software Engineering},
  publisher = {Springer Berlin Heidelberg},
  year = {2010},
  editor = {Rosenblum, DavidS. and Taentzer, Gabriele},
  volume = {6013},
  series = {Lecture Notes in Computer Science},
  pages = {29-43},
  abstract = {This paper explains how the MOMENT2 formal model transformation framework
	has been extended to support the formal specification and analysis
	of real-time model-based systems. We provide a collection of built-in
	timed constructs for defining the timed behavior of model-based systems
	that are specified with in-place model transformations. In addition,
	we show how an existing model-based system can be extended with timed
	features in a non-intrusive way (i.e, without modifying the class
	diagram) by using in-place multi-domain model transformations supported
	in MOMENT2. We give a real-time rewrite formal semantics to real-time
	model transformations, and show how the models can be simulated and
	model checked using MOMENT2’s Maude-based analysis tools. In this
	way, MOMENT2 becomes a flexible, effective, automatic tool for specifying
	and verifying model-based real-time and embedded systems within the
	Eclipse Modeling Framework using graph transformation and rewriting
	logic techniques. We illustrate our approach on a simple round trip
	time protocol.},
  doi = {10.1007/978-3-642-12029-9_3},
  isbn = {978-3-642-12028-2},
  url = {http://dx.doi.org/10.1007/978-3-642-12029-9_3}
}
@INPROCEEDINGS{Konigs2005,
  author = {K{\"o}nigs, Alexander},
  title = {Model transformation with triple graph grammars},
  booktitle = {Model Transformations in Practice Satellite Workshop of MODELS},
  year = {2005},
  pages = {166}
}
@ARTICLE{Balasubramanian2007,
  author = {Balasubramanian, Daniel and Narayanan, Anantha and van Buskirk, Christopher
	and Karsai, Gabor},
  title = {The graph rewriting and transformation language: {GReAT}},
  journal = {Electronic Communications of the EASST},
  year = {2007},
  volume = {1}
}
@ARTICLE{Agrawal2003,
  author = {Agrawal, Aditya and Karsai, Gabor and Shi, Feng},
  title = {Graph transformations on domain-specific models},
  journal = {Journal on Software and Systems Modeling},
  year = {2003}
}
@INCOLLECTION{Lawley2006,
  author = {Lawley, Michael and Steel, Jim},
  title = {Practical declarative model transformation with Tefkat},
  booktitle = {Satellite Events at the MoDELS 2005 Conference},
  publisher = {Springer Berlin Heidelberg},
  year = {2006},
  editor = {Bruel, Jean-Michel},
  volume = {3844},
  series = {Lecture Notes in Computer Science},
  pages = {139--150},
  doi = {10.1007/11663430_15},
  isbn = {978-3-540-31780-7},
  organization = {Springer},
  url = {http://dx.doi.org/10.1007/11663430_15}
}
@INPROCEEDINGS{Muller2005a,
  author = {Muller, Pierre-Alain and Fleurey, Franck and Vojtisek, Didier and
	Drey, Zo{\'e} and Pollet, Damien and Fondement, Fr{\'e}d{\'e}ric
	and Studer, Philippe and J{\'e}z{\'e}quel, Jean-Marc and others},
  title = {On executable meta-languages applied to model transformations},
  booktitle = {In Model Transformations In Practice Workshop},
  year = {2005}
}
@PHDTHESIS{Huet1976,
  author = {Huet, G{\'e}rard},
  title = {{Résolution d'équations dans les langages d'ordre 1,2, …, $\omega$}},
  year = {1976}
}
@TECHREPORT{Appel1993,
  author = {Appel, Andrew W and Con{\c{c}}alves, Marcelo JR},
  title = {Hash-consing garbage collection},
  institution = {Princeton University, Department of Computer Science},
  year = {1993},
  month = {February},
  publisher = {Princeton University, Department of Computer Science}
}
@ARTICLE{Eker2007,
  author = {Eker, Steven and Mart{\'\i}-Oliet, Narciso and Meseguer, Jos{\'e}
	and Verdejo, Alberto},
  title = {Deduction, strategies, and rewriting},
  journal = {Electronic Notes in Theoretical Computer Science},
  year = {2007},
  volume = {174},
  pages = {3--25},
  number = {11},
  publisher = {Elsevier}
}
@MANUAL{Clavel2011,
  title = {Maude manual (version 2.6)},
  author = {Clavel, Manuel and Dur{\'a}n, Francisco and Eker, Steven and Lincoln,
	Patrick and Mart{\i}-Oliet, Narciso and Meseguer, Jos{\'e} and Talcott,
	Carolyn},
  year = {2011},
  journal = {University of Illinois, Urbana-Champaign},
  number = {3},
  pages = {4--6},
  volume = {1}
}
@ARTICLE{Clavel2002a,
  author = {Clavel, Manuel and Meseguer, Jos{\'e}},
  title = {Reflection in conditional rewriting logic},
  journal = {Theoretical Computer Science},
  year = {2002},
  volume = {285},
  pages = {245--288},
  number = {2},
  publisher = {Elsevier}
}
@ARTICLE{Claessen2011,
  author = {Claessen, Koen and Hughes, John},
  title = {QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs},
  journal = {SIGPLAN Not.},
  year = {2011},
  volume = {46},
  pages = {53--64},
  number = {4},
  month = may,
  address = {New York, NY, USA},
  doi = {10.1145/1988042.1988046},
  issn = {0362-1340},
  issue_date = {April 2011},
  numpages = {12},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1988042.1988046}
}
@ARTICLE{Claessen2000,
  author = {Claessen, Koen and Hughes, John},
  title = {QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs},
  journal = {SIGPLAN Not.},
  year = {2000},
  volume = {35},
  pages = {268--279},
  number = {9},
  month = sep,
  address = {New York, NY, USA},
  doi = {10.1145/357766.351266},
  issn = {0362-1340},
  issue_date = {Sept. 2000},
  numpages = {12},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/357766.351266}
}

@INCOLLECTION{Hughes2010,
  author = {Hughes, John},
  title = {Software Testing with QuickCheck},
  booktitle = {Central European Functional Programming School},
  publisher = {Springer Berlin Heidelberg},
  year = {2010},
  editor = {Horváth, Zoltán and Plasmeijer, Rinus and Zsók, Viktória},
  volume = {6299},
  series = {Lecture Notes in Computer Science},
  pages = {183-223},
  doi = {10.1007/978-3-642-17685-2_6},
  isbn = {978-3-642-17684-5},
  url = {http://dx.doi.org/10.1007/978-3-642-17685-2_6}
}
@ARTICLE{Godefroid2005,
  author = {Godefroid, Patrice and Klarlund, Nils and Sen, Koushik},
  title = {DART: Directed Automated Random Testing},
  journal = {SIGPLAN Not.},
  year = {2005},
  volume = {40},
  pages = {213--223},
  number = {6},
  month = jun,
  acmid = {1065036},
  address = {New York, NY, USA},
  doi = {10.1145/1064978.1065036},
  file = {Godefroid2005_DART_DirectedAutomatedRandomTesting.pdf:Godefroid2005_DART_DirectedAutomatedRandomTesting.pdf:PDF},
  issn = {0362-1340},
  issue_date = {June 2005},
  keywords = {automated test generation, interfaces, program verification, random
	testing, software testing},
  numpages = {11},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1064978.1065036}
}
@BOOK{Beck2004,
  title = {Extreme Programming Explained: Embrace Change (2Nd Edition)},
  publisher = {Addison-Wesley Professional},
  year = {2004},
  author = {Beck, Kent and Andres, Cynthia},
  isbn = {0321278658}
}
@BOOK{Beck2003,
  title = {Test-driven development: by example},
  publisher = {Addison-Wesley Professional},
  year = {2003},
  author = {Beck, Kent},
  isbn = {0321146530}
}
@INPROCEEDINGS{Williams2003,
  author = {Williams, L. and Maximilien, E.M. and Vouk, M.},
  title = {Test-driven development as a defect-reduction practice},
  booktitle = {Software Reliability Engineering, 2003. ISSRE 2003. 14th International
	Symposium on},
  year = {2003},
  pages = {34-45},
  month = {Nov},
  doi = {10.1109/ISSRE.2003.1251029},
  issn = {1071-9458}
}
@INCOLLECTION{Giner2009,
  author = {Giner, Pau and Pelechano, Vicente},
  title = {Test-Driven Development of Model Transformations},
  booktitle = {Model Driven Engineering Languages and Systems},
  publisher = {Springer Berlin Heidelberg},
  year = {2009},
  editor = {Schürr, Andy and Selic, Bran},
  volume = {5795},
  series = {Lecture Notes in Computer Science},
  pages = {748-752},
  doi = {10.1007/978-3-642-04425-0_61},
  isbn = {978-3-642-04424-3},
  keywords = {Model-to-model transformations; test-driven development},
  url = {http://dx.doi.org/10.1007/978-3-642-04425-0_61}
}

@INPROCEEDINGS{Fleurey2004,
  author = {Fleurey, F. and Steel, J. and Baudry, B.},
  title = {Validation in model-driven engineering: testing model transformations},
  booktitle = {Model, Design and Validation, 2004. Proceedings. 2004 First International
	Workshop on},
  year = {2004},
  pages = {29-40},
  month = {Nov},
  doi = {10.1109/MODEVA.2004.1425846}
}

@ARTICLE{Earle2013,
  author = {Earle, Clara Benac and Fredlund, Lars-Ake},
  title = {Testing Java with QuickCheck},
  year = {2013},
  file = {Earle2013_testing_java_with_quickcheck.pdf:Earle2013_testing_java_with_quickcheck.pdf:PDF}
}

@ARTICLE{Kuester2006,
  author = {Küster, JochenM.},
  title = {Definition and validation of model transformations},
  journal = {Software \& Systems Modeling},
  year = {2006},
  volume = {5},
  pages = {233-259},
  number = {3},
  doi = {10.1007/s10270-006-0018-8},
  issn = {1619-1366},
  language = {English},
  publisher = {Springer-Verlag},
  url = {http://dx.doi.org/10.1007/s10270-006-0018-8}
}

@ARTICLE{Fleurey2009,
  author = {Fleurey, Franck and Baudry, Benoit and Muller, Pierre-Alain and Traon,
	YvesLe},
  title = {Qualifying input test data for model transformations},
  journal = {Software \& Systems Modeling},
  year = {2009},
  volume = {8},
  pages = {185-203},
  number = {2},
  doi = {10.1007/s10270-007-0074-8},
  issn = {1619-1366},
  keywords = {Software testing; Model transformation; Test criteria; Test qualification;
	Metamodelling; Model-based testing},
  language = {English},
  publisher = {Springer-Verlag},
  url = {http://dx.doi.org/10.1007/s10270-007-0074-8}
}
@INCOLLECTION{Rutherford2003,
  author = {Rutherford, MatthewJ. and Wolf, AlexanderL.},
  title = {A Case for Test-Code Generation in Model-Driven Systems},
  booktitle = {Generative Programming and Component Engineering},
  publisher = {Springer Berlin Heidelberg},
  year = {2003},
  editor = {Pfenning, Frank and Smaragdakis, Yannis},
  volume = {2830},
  series = {Lecture Notes in Computer Science},
  pages = {377-396},
  doi = {10.1007/978-3-540-39815-8_23},
  isbn = {978-3-540-20102-1},
  url = {http://dx.doi.org/10.1007/978-3-540-39815-8_23}
}
@INPROCEEDINGS{Brottier2006,
  author = {Brottier, E. and Fleurey, F. and Steel, J. and Baudry, B. and Le
	Traon, Y.},
  title = {Metamodel-based Test Generation for Model Transformations: an Algorithm
	and a Tool},
  booktitle = {Software Reliability Engineering, 2006. ISSRE '06. 17th International
	Symposium on},
  year = {2006},
  pages = {85-94},
  month = {Nov},
  doi = {10.1109/ISSRE.2006.27},
  issn = {1071-9458}
}
@INCOLLECTION{Lin2005,
  author = {Lin, Yuehua and Zhang, Jing and Gray, Jeff},
  title = {A Testing Framework for Model Transformations},
  booktitle = {Model-Driven Software Development},
  publisher = {Springer Berlin Heidelberg},
  year = {2005},
  editor = {Beydeda, Sami and Book, Matthias and Gruhn, Volker},
  pages = {219-236},
  doi = {10.1007/3-540-28554-7_10},
  isbn = {978-3-540-25613-7},
  url = {http://dx.doi.org/10.1007/3-540-28554-7_10}
}

@INPROCEEDINGS{Lamari2007,
  author = {Lamari, Maher},
  title = {Towards an Automated Test Generation for the Verification of Model
	Transformations},
  booktitle = {Proceedings of the 2007 ACM Symposium on Applied Computing},
  year = {2007},
  series = {SAC '07},
  pages = {998--1005},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1244220},
  doi = {10.1145/1244002.1244220},
  isbn = {1-59593-480-4},
  keywords = {MDA (Model Driven Architecture), automated verification, input test
	models, model transformation, test case generation},
  location = {Seoul, Korea},
  numpages = {8},
  url = {http://doi.acm.org/10.1145/1244002.1244220}
}
@INCOLLECTION{Sen2009,
  author = {Sen, Sagar and Baudry, Benoit and Mottu, Jean-Marie},
  title = {Automatic Model Generation Strategies for Model Transformation Testing},
  booktitle = {Theory and Practice of Model Transformations},
  publisher = {Springer Berlin Heidelberg},
  year = {2009},
  editor = {Paige, RichardF.},
  volume = {5563},
  series = {Lecture Notes in Computer Science},
  pages = {148-164},
  doi = {10.1007/978-3-642-02408-5_11},
  isbn = {978-3-642-02407-8},
  url = {http://dx.doi.org/10.1007/978-3-642-02408-5_11}
}
@BOOK{Nipkow2002,
  title = {Isabelle/HOL: a proof assistant for higher-order logic},
  publisher = {Springer},
  year = {2002},
  author = {Nipkow, Tobias and Paulson, Lawrence C and Wenzel, Markus},
  volume = {2283}
}

@BOOK{Bertot2004,
  title = {Interactive theorem proving and program development -- Coq'Art:the
	calculus of inductive constructions},
  publisher = {springer},
  year = {2004},
  author = {Bertot, Yves and Cast{\'e}ran, Pierre},
  isbn = {3540208542}
}
@MANUAL{Coq,
  title = {The Coq proof assistant reference manual},
  author = {{The Coq development team}},
  organization = {LogiCal Project},
  year = {2004},
  note = {Version 8.0},
  url = {http://coq.inria.fr}
}

@ARTICLE{Jhala2009,
  author = {Jhala, Ranjit and Majumdar, Rupak},
  title = {Software Model Checking},
  journal = {ACM Comput. Surv.},
  year = {2009},
  volume = {41},
  pages = {21:1--21:54},
  number = {4},
  month = oct,
  acmid = {1592438},
  address = {New York, NY, USA},
  articleno = {21},
  doi = {10.1145/1592434.1592438},
  issn = {0360-0300},
  issue_date = {October 2009},
  keywords = {Software model checking, abstraction, counterexample-guided refinement,
	enumerative and symbolic model checking, liveness, safety},
  numpages = {54},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1592434.1592438}
}
@MANUAL{DO-330,
  key = {{D0-330}},
  author = {{Special Committee 205 of RTCA}},
  title = {DO-330: Software Tool Qualification Considerations},
  month = {December},
  year = {2011},
  file = {DO-330_rtca.pdf:DO-330_rtca.pdf:PDF},
  other = {S. of the SC-205/WG-71 Plenary}
}
@MANUAL{DO-178C,
  key = {{D0-178C}},
  author = {{Special Committee 205 of RTCA}},
  title = {DO-178C: Software considerations in airborne systems and equipment
	certification},
  year = {2011}
}

@ARTICLE{IEEEstd610,
  title = {IEEE Standard Glossary of Software Engineering Terminology},
  key = {IEEE-STD-610},
  journal = {IEEE Std 610.12-1990},
  year = {1990},
  pages = {1-84},
  month = {Dec},
  doi = {10.1109/IEEESTD.1990.101064}
}
@ARTICLE{Berthomieu2004,
  author = {Berthomieu , B. and Ribet, P.-O. and Vernadat, F.},
  title = {The tool TINA – Construction of abstract state spaces for petri nets
	and time petri nets},
  journal = {International Journal of Production Research},
  year = {2004},
  volume = {42},
  pages = {2741-2756},
  number = {14},
  doi = {10.1080/00207540412331312688},
  eprint = {http://www.tandfonline.com/doi/pdf/10.1080/00207540412331312688},
  url = {http://www.tandfonline.com/doi/abs/10.1080/00207540412331312688}
}
@INCOLLECTION{Garavel2011,
  author = {Garavel, Hubert and Lang, Frédéric and Mateescu, Radu and Serwe,
	Wendelin},
  title = {CADP 2010: A Toolbox for the Construction and Analysis of Distributed
	Processes},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
  publisher = {Springer Berlin Heidelberg},
  year = {2011},
  editor = {Abdulla, ParoshAziz and Leino, K.RustanM.},
  volume = {6605},
  series = {Lecture Notes in Computer Science},
  pages = {372-387},
  doi = {10.1007/978-3-642-19835-9_33},
  isbn = {978-3-642-19834-2},
  url = {http://dx.doi.org/10.1007/978-3-642-19835-9_33}
}
@INPROCEEDINGS{Bayazit2005,
  author = {Bayazit, A. A. and Malik, S.},
  title = {Complementary Use of Runtime Validation and Model Checking},
  booktitle = {Proceedings of the 2005 IEEE/ACM International Conference on Computer-aided
	Design},
  year = {2005},
  series = {ICCAD '05},
  pages = {1052--1059},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid = {1129750},
  isbn = {0-7803-9254-X},
  location = {San Jose, CA},
  numpages = {8},
  url = {http://dl.acm.org/citation.cfm?id=1129601.1129750}
}

@INCOLLECTION{Taentzer2004,
  author = {Taentzer, Gabriele},
  title = {AGG: A Graph Transformation Environment for Modeling and Validation
	of Software},
  booktitle = {Applications of Graph Transformations with Industrial Relevance},
  publisher = {Springer Berlin Heidelberg},
  year = {2004},
  editor = {Pfaltz, JohnL. and Nagl, Manfred and Böhlen, Boris},
  volume = {3062},
  series = {Lecture Notes in Computer Science},
  pages = {446-453},
  abstract = {AGG is a general development environment for algebraic graph transformation
	systems which follows the interpretative approach. Its special power
	comes from a very flexible attribution concept. AGG graphs are allowed
	to be attributed by any kind of Java objects. Graph transformations
	can be equipped with arbitrary computations on these Java objects
	described by a Java expression. The AGG environment consists of a
	graphical user interface comprising several visual editors, an interpreter,
	and a set of validation tools. The interpreter allows the stepwise
	transformation of graphs as well as rule applications as long as
	possible. AGG supports several kinds of validations which comprise
	graph parsing, consistency checking of graphs and conflict detection
	in concurrent transformations by critical pair analysis of graph
	rules. Applications of AGG include graph and rule-based modeling
	of software, validation of system properties by assigning a graph
	transformation based semantics to some system model, graph transformation
	based evolution of software, and the definition of visual languages
	based on graph grammars.},
  doi = {10.1007/978-3-540-25959-6_35},
  isbn = {978-3-540-22120-3},
  language = {English},
  url = {http://dx.doi.org/10.1007/978-3-540-25959-6_35}
}

